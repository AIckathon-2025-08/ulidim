<?xml version="1.0" encoding="UTF-8"?>
<repository>
<repository_structure>
  <file name="IMPLEMENTATION_SUMMARY.md"/>
  <file name=".tool-versions"/>
  <directory name="server">
    <directory name="database">
      <file name="init.sql"/>
    </directory>
    <directory name="websocket">
      <file name="handlers.js"/>
    </directory>
    <file name="healthcheck.js"/>
    <file name="server.js"/>
    <file name="Dockerfile"/>
    <file name=".dockerignore"/>
    <file name="package.json"/>
    <directory name="routes">
      <file name="games.js"/>
      <file name="votes.js"/>
      <file name="auth.js"/>
    </directory>
    <file name="env.example"/>
  </directory>
  <file name="vite.config.js"/>
  <file name="README.md"/>
  <file name=".dockerignore"/>
  <file name=".gitignore"/>
  <file name="package.json"/>
  <file name="style.css"/>
  <directory name="generated-docs">
    <file name="repomix_output.xml"/>
  </directory>
  <file name="Dockerfile.frontend"/>
  <directory name="memory_bank">
    <file name="techContext.md"/>
    <file name="activeContext.md"/>
    <file name="progress.md"/>
    <file name="productContext.md"/>
    <file name="projectbrief.md"/>
    <file name="systemPatterns.md"/>
  </directory>
  <directory name="src">
    <file name="phaser-config.js"/>
    <file name="api.js"/>
    <directory name="services">
      <file name="music.js"/>
    </directory>
  </directory>
</repository_structure>
<repository_files>
  <file>
    
  
    <path>IMPLEMENTATION_SUMMARY.md</path>
    
  
    <content># Level 3 Implementation Summary: Authentication + Enhanced Timer Features

## 🎯 Implementation Completed Successfully

### Overview
Successfully implemented **Level 3** enhancements including basic authentication system and enhanced timer interruption functionality while maintaining full backward compatibility and VAN design consistency.

## ✅ Phase 1: Authentication System

### Backend Implementation
- **Environment Configuration**: Added `ADMIN_USERNAME` and `ADMIN_PASSWORD` to `.env` and `docker-compose.yml`
- **Authentication Middleware**: Created `server/middleware/auth.js` with session management
- **Authentication Routes**: Implemented `server/routes/auth.js` with endpoints:
  - `POST /api/auth/login` - Admin authentication
  - `POST /api/auth/logout` - Session termination
  - `GET/POST /api/auth/validate` - Session validation
  - `GET /api/auth/info` - Service information
- **Protected Endpoints**: Game creation (`POST /api/games`) now requires authentication
- **Session Security**: 24-hour session timeout with secure token generation

### Frontend Implementation
- **Login Page**: VAN-styled authentication form with proper accessibility
- **Session Management**: Secure `sessionStorage` integration
- **Authentication Flow**: Automatic session checking and validation
- **API Integration**: Authentication headers for protected requests
- **Error Handling**: User-friendly error messages and loading states
- **Logout Functionality**: Complete session cleanup

### Security Features
- **Credential Validation**: Environment-based admin credentials
- **Session Tokens**: Cryptographically secure random tokens
- **Authorization Headers**: Bearer token authentication
- **Protected Routes**: Middleware-based endpoint protection
- **Session Expiration**: Automatic cleanup with timeout

## ✅ Phase 2: Enhanced Timer Features

### Timer Interruption Modal
- **Full-Screen Modal**: VAN-styled overlay with accessibility features
- **Timer Display**: Real-time countdown in modal
- **Action Buttons**: Clear &quot;Yes&quot;/&quot;No&quot; options with proper styling
- **Focus Management**: Keyboard navigation and screen reader support

### Timer Logic Enhancement
- **Interruption Detection**: Automatic modal display when timer is running
- **Force Reveal**: Timer cancellation with lie reveal
- **State Management**: Proper timer cleanup and UI updates
- **Graceful Handling**: No interruption of existing timer functionality

### UX Improvements
- **Visual Feedback**: Pulsing timer icon and clear messaging
- **Responsive Design**: Mobile-optimized modal layout
- **Smooth Animations**: VAN-consistent transitions and effects
- **Accessibility**: ARIA labels and keyboard navigation

## ✅ Phase 3: Comprehensive Testing

### Authentication Testing
```
✅ Authentication info endpoint working
✅ Login with valid credentials successful
✅ Session validation working correctly
✅ Protected game creation requires authentication
✅ Unauthorized access properly blocked
✅ Logout functionality complete
✅ Session invalidation after logout verified
```

### Integration Testing
```
✅ Game creation with authentication successful
✅ Public game access (voting) works without auth
✅ Timer functionality integrated properly
✅ Backward compatibility maintained
✅ VAN design consistency preserved
✅ WebSocket functionality unaffected
```

### Security Testing
```
✅ Invalid credentials rejected
✅ Expired sessions invalidated
✅ Unauthorized endpoint access blocked
✅ Session security verified
✅ CORS configuration maintained
```

## 🎨 Design Implementation

### VAN Design Consistency
- **Color Palette**: Maintained `#ff6b9d`, `#4ecdc4`, `#45b7d1`, `#96ceb4`, `#feca57`
- **Typography**: Comic Sans MS / Marker Felt consistency
- **Visual Effects**: Pointillism patterns and pop-art styling
- **Animations**: Smooth transitions with VAN aesthetic
- **Responsive Design**: Mobile-first approach maintained

### UI/UX Enhancements
- **Login Experience**: Professional yet playful authentication
- **Timer Interruption**: Intuitive modal with clear actions
- **Error States**: User-friendly error messages
- **Loading States**: Visual feedback during operations
- **Accessibility**: WCAG compliance with keyboard navigation

## 🔧 Technical Architecture

### File Structure Changes
```
server/
├── middleware/auth.js       (NEW - Authentication middleware)
├── routes/auth.js          (NEW - Authentication routes)
├── routes/games.js         (MODIFIED - Added auth protection)
├── env.example             (MODIFIED - Added admin credentials)
└── server.js               (MODIFIED - Added auth routes)

frontend/
├── index.html              (MODIFIED - Added login page + timer modal)
├── style.css               (MODIFIED - Added auth + modal styles)
├── src/main.js            (MODIFIED - Added auth + timer logic)
└── src/api.js             (MODIFIED - Added auth headers)

infrastructure/
├── docker-compose.yml      (MODIFIED - Added auth environment vars)
└── Dockerfile.frontend     (No changes - working correctly)
```

### Database Changes
- **No schema changes required** - Leveraged existing `creator_session` field
- **Migration compatibility** - Existing games continue working
- **Performance maintained** - No impact on query performance

### API Changes
- **New Endpoints**: Authentication routes (`/api/auth/*`)
- **Protected Endpoints**: Game creation requires authentication
- **Backward Compatibility**: All existing endpoints work unchanged
- **Error Responses**: Consistent error codes and messages

## 🚀 Production Readiness

### Environment Configuration
```bash
# Required environment variables
ADMIN_USERNAME=your_admin_username
ADMIN_PASSWORD=your_secure_password
SESSION_SECRET=your-super-secret-session-key
```

### Security Considerations
- **Strong Passwords**: Configure secure admin credentials
- **Session Secrets**: Use cryptographically secure session keys
- **HTTPS**: Ensure secure transmission in production
- **Rate Limiting**: Existing rate limiting protects auth endpoints

### Deployment Notes
- **Zero Downtime**: New features don't affect existing games
- **Database Migration**: Automatic, no manual intervention required
- **Container Health**: All health checks passing
- **Performance Impact**: Minimal - authentication adds &lt;5ms to protected requests

## 🎉 Success Metrics

### Functionality
- ✅ **100% Authentication Tests Passing**
- ✅ **Timer Interruption Working Correctly**
- ✅ **Backward Compatibility Verified**
- ✅ **VAN Design Preserved**
- ✅ **Mobile Responsive**
- ✅ **Accessibility Compliant**

### Security
- ✅ **Admin Access Protected**
- ✅ **Session Management Secure**
- ✅ **Unauthorized Access Blocked**
- ✅ **Credential Validation Working**

### User Experience
- ✅ **Professional Login Flow**
- ✅ **Intuitive Timer Interruption**
- ✅ **Clear Error Messages**
- ✅ **Smooth Animations**
- ✅ **Consistent Design Language**

---

## 📋 Ready for Production

The **Level 3 Implementation** is **COMPLETE** and ready for production deployment. All features have been thoroughly tested, security measures are in place, and the system maintains full backward compatibility while adding powerful new authentication and timer management capabilities.

**Next Steps**: REFLECT MODE - Document lessons learned and prepare for future enhancements.</content>
    

  </file>
  <file>
    
  
    <path>.tool-versions</path>
    
  
    <content>nodejs 20.15.1</content>
    

  </file>
  <file>
    
  
    <path>server/database/init.sql</path>
    
  
    <content>-- Database initialization script
-- This file is automatically executed when the database container starts

-- Create the database if it doesn't exist
CREATE DATABASE two_truths_db;

-- Connect to the database
\c two_truths_db;

-- Create tables (these will be created by the application migration as well)
-- This is just a backup in case the application doesn't run migrations

-- Games table
CREATE TABLE IF NOT EXISTS games (
    id VARCHAR(255) PRIMARY KEY,
    creator_session VARCHAR(255) NOT NULL,
    teammate_name VARCHAR(255) NOT NULL,
    teammate_picture TEXT,
    statement_1 TEXT NOT NULL,
    statement_2 TEXT NOT NULL,
    statement_3 TEXT NOT NULL,
    lie_index INTEGER NOT NULL CHECK (lie_index &gt;= 0 AND lie_index &lt;= 2),
    timer_duration INTEGER,
    timer_start_time BIGINT,
    background_music TEXT,
    lie_revealed BOOLEAN DEFAULT FALSE,
    game_started BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Votes table
CREATE TABLE IF NOT EXISTS votes (
    id SERIAL PRIMARY KEY,
    game_id VARCHAR(255) REFERENCES games(id) ON DELETE CASCADE,
    user_session VARCHAR(255) NOT NULL,
    voted_statement INTEGER NOT NULL CHECK (voted_statement &gt;= 0 AND voted_statement &lt;= 2),
    user_ip VARCHAR(45),
    user_agent TEXT,
    voted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(game_id, user_session)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_votes_game_id ON votes(game_id);
CREATE INDEX IF NOT EXISTS idx_games_created_at ON games(created_at);
CREATE INDEX IF NOT EXISTS idx_votes_voted_at ON votes(voted_at);
CREATE INDEX IF NOT EXISTS idx_games_lie_revealed ON games(lie_revealed);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for games table
DROP TRIGGER IF EXISTS update_games_updated_at ON games;
CREATE TRIGGER update_games_updated_at
    BEFORE UPDATE ON games
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Insert some sample data for testing (optional)
-- INSERT INTO games (id, teammate_name, teammate_picture, statement_1, statement_2, statement_3, lie_index, timer_duration)
-- VALUES ('sample-game-id', 'John Doe', 'data:image/jpeg;base64,...', 'I have visited 15 countries', 'I can speak 3 languages', 'I once met a celebrity', 1, 120);

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;</content>
    

  </file>
  <file>
    
  
    <path>server/websocket/handlers.js</path>
    
  
    <content>import pool from '../database/connection.js';

export const setupWebSocket = (io) =&gt; {
  // Track connected users per game
  const gameRooms = new Map();

  io.on('connection', (socket) =&gt; {
    console.log(`🔌 User connected: ${socket.id}`);

    // Join a game room
    socket.on('joinGame', async (data) =&gt; {
      try {
        const { gameId, userSession, isAdmin = false } = data;

        if (!gameId) {
          socket.emit('error', { message: 'Game ID is required' });
          return;
        }

        // Check if game exists
        const gameResult = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
        if (gameResult.rows.length === 0) {
          socket.emit('error', { message: 'Game not found' });
          return;
        }

        // Join the game room
        socket.join(`game-${gameId}`);
        socket.gameId = gameId;
        socket.userSession = userSession;
        socket.isAdmin = isAdmin;

        // Track users in game
        if (!gameRooms.has(gameId)) {
          gameRooms.set(gameId, new Set());
        }
        gameRooms.get(gameId).add({
          socketId: socket.id,
          userSession,
          isAdmin,
          joinedAt: new Date()
        });

        console.log(`👥 User ${userSession} joined game ${gameId} (Admin: ${isAdmin})`);

        // Send current game state to the newly joined user
        await sendGameUpdate(socket, gameId);

        // Notify other users in the room about new participant
        socket.to(`game-${gameId}`).emit('userJoined', {
          userSession,
          isAdmin,
          timestamp: new Date()
        });

        // Send updated participant count
        const participantCount = gameRooms.get(gameId).size;
        io.to(`game-${gameId}`).emit('participantCountUpdate', {
          count: participantCount
        });

      } catch (error) {
        console.error('Error joining game:', error);
        socket.emit('error', { message: 'Failed to join game' });
      }
    });

    // Request real-time updates for votes
    socket.on('requestVoteUpdate', async (data) =&gt; {
      try {
        const { gameId } = data;

        if (socket.gameId !== gameId) {
          socket.emit('error', { message: 'Not authorized for this game' });
          return;
        }

        await sendVoteUpdate(socket, gameId);
      } catch (error) {
        console.error('Error requesting vote update:', error);
        socket.emit('error', { message: 'Failed to get vote update' });
      }
    });

    // Admin reveals the lie
    socket.on('revealLie', async (data) =&gt; {
      try {
        const { gameId } = data;

        if (!socket.isAdmin || socket.gameId !== gameId) {
          socket.emit('error', { message: 'Not authorized to reveal lie' });
          return;
        }

        // Verify that this user is actually the creator of the game
        const creatorCheck = await pool.query(
          'SELECT creator_session FROM games WHERE id = $1',
          [gameId]
        );

        if (creatorCheck.rows.length === 0) {
          socket.emit('error', { message: 'Game not found' });
          return;
        }

        if (creatorCheck.rows[0].creator_session !== socket.userSession) {
          socket.emit('error', { message: 'Only the game creator can reveal the lie' });
          return;
        }

        // Update database to mark lie as revealed
        const result = await pool.query(
          'UPDATE games SET lie_revealed = true WHERE id = $1 AND lie_revealed = false RETURNING lie_index',
          [gameId]
        );

        if (result.rows.length === 0) {
          socket.emit('error', { message: 'Game not found or lie already revealed' });
          return;
        }

        const lieIndex = result.rows[0].lie_index;

        // Notify all clients in the game room
        io.to(`game-${gameId}`).emit('lieRevealed', {
          gameId,
          lieIndex,
          revealedBy: 'admin',
          timestamp: new Date()
        });

        console.log(`🎯 Admin revealed lie for game ${gameId}: statement ${lieIndex}`);

      } catch (error) {
        console.error('Error revealing lie:', error);
        socket.emit('error', { message: 'Failed to reveal lie' });
      }
    });

    // Handle timer updates
    socket.on('timerUpdate', (data) =&gt; {
      try {
        const { gameId, timeRemaining } = data;

        if (!socket.isAdmin || socket.gameId !== gameId) {
          return;
        }

        // Broadcast timer update to all participants
        socket.to(`game-${gameId}`).emit('timerUpdate', {
          timeRemaining,
          timestamp: new Date()
        });

      } catch (error) {
        console.error('Error updating timer:', error);
      }
    });

    // Handle disconnection
    socket.on('disconnect', () =&gt; {
      console.log(`🔌 User disconnected: ${socket.id}`);

      if (socket.gameId &amp;&amp; gameRooms.has(socket.gameId)) {
        const gameUsers = gameRooms.get(socket.gameId);

        // Remove user from game room tracking
        const userToRemove = Array.from(gameUsers).find(user =&gt; user.socketId === socket.id);
        if (userToRemove) {
          gameUsers.delete(userToRemove);

          // Notify remaining users
          socket.to(`game-${socket.gameId}`).emit('userLeft', {
            userSession: socket.userSession,
            isAdmin: socket.isAdmin,
            timestamp: new Date()
          });

          // Send updated participant count
          const participantCount = gameUsers.size;
          io.to(`game-${socket.gameId}`).emit('participantCountUpdate', {
            count: participantCount
          });

          // Clean up empty game rooms
          if (gameUsers.size === 0) {
            gameRooms.delete(socket.gameId);
            console.log(`🧹 Cleaned up empty game room: ${socket.gameId}`);
          }
        }
      }
    });

    // Ping/pong for connection health
    socket.on('ping', () =&gt; {
      socket.emit('pong');
    });

  });

  // Helper function to send complete game state
  const sendGameUpdate = async (socket, gameId) =&gt; {
    try {
      const gameQuery = 'SELECT * FROM games WHERE id = $1';
      const gameResult = await pool.query(gameQuery, [gameId]);

      if (gameResult.rows.length === 0) {
        socket.emit('error', { message: 'Game not found' });
        return;
      }

      const game = gameResult.rows[0];

      // Get current vote counts
      const voteQuery = `
        SELECT voted_statement, COUNT(*) as count
        FROM votes
        WHERE game_id = $1
        GROUP BY voted_statement
        ORDER BY voted_statement
      `;
      const voteResult = await pool.query(voteQuery, [gameId]);

      const votes = [0, 0, 0];
      voteResult.rows.forEach(row =&gt; {
        votes[row.voted_statement] = parseInt(row.count);
      });

      socket.emit('gameUpdate', {
        gameId: game.id,
        teammate_name: game.teammate_name,
        teammate_picture: game.teammate_picture,
        statements: [game.statement_1, game.statement_2, game.statement_3],
        lie_index: game.lie_revealed ? game.lie_index : null,
        timer_duration: game.timer_duration,
        timer_start_time: game.timer_start_time,
        lie_revealed: game.lie_revealed,
        votes,
        totalVotes: votes.reduce((a, b) =&gt; a + b, 0),
        timestamp: new Date()
      });

    } catch (error) {
      console.error('Error sending game update:', error);
      socket.emit('error', { message: 'Failed to get game update' });
    }
  };

  // Helper function to send vote updates
  const sendVoteUpdate = async (socket, gameId) =&gt; {
    try {
      const voteQuery = `
        SELECT voted_statement, COUNT(*) as count
        FROM votes
        WHERE game_id = $1
        GROUP BY voted_statement
        ORDER BY voted_statement
      `;
      const result = await pool.query(voteQuery, [gameId]);

      const votes = [0, 0, 0];
      result.rows.forEach(row =&gt; {
        votes[row.voted_statement] = parseInt(row.count);
      });

      socket.emit('voteUpdate', {
        gameId,
        votes,
        totalVotes: votes.reduce((a, b) =&gt; a + b, 0),
        timestamp: new Date()
      });

    } catch (error) {
      console.error('Error sending vote update:', error);
      socket.emit('error', { message: 'Failed to get vote update' });
    }
  };

  // Periodic cleanup of inactive games (every 30 minutes)
  setInterval(async () =&gt; {
    try {
      const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 hours ago
      const result = await pool.query(
        'DELETE FROM games WHERE created_at &lt; $1 AND lie_revealed = true',
        [cutoffTime]
      );

      if (result.rowCount &gt; 0) {
        console.log(`🧹 Cleaned up ${result.rowCount} old games`);
      }
    } catch (error) {
      console.error('Error cleaning up old games:', error);
    }
  }, 30 * 60 * 1000); // 30 minutes

  console.log('🔌 WebSocket handlers setup complete');
};</content>
    

  </file>
  <file>
    
  
    <path>server/healthcheck.js</path>
    
  
    <content>import http from 'http';

const options = {
  hostname: 'localhost',
  port: 3001,
  path: '/api/health',
  method: 'GET',
  timeout: 3000
};

const req = http.request(options, (res) =&gt; {
  if (res.statusCode === 200) {
    process.exit(0);
  } else {
    console.error(`Health check failed with status: ${res.statusCode}`);
    process.exit(1);
  }
});

req.on('error', (err) =&gt; {
  console.error(`Health check failed: ${err.message}`);
  process.exit(1);
});

req.on('timeout', () =&gt; {
  console.error('Health check timed out');
  req.destroy();
  process.exit(1);
});

req.end();</content>
    

  </file>
  <file>
    
  
    <path>server/server.js</path>
    
  
    <content>import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

import { initializeDatabase } from './database/connection.js';
import { setupWebSocket } from './websocket/handlers.js';

// Load environment variables
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL || &quot;http://localhost:3000&quot;,
    methods: [&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;]
  }
});

const PORT = process.env.PORT || 3001;

// Security middleware
app.use(helmet({
  contentSecurityPolicy: false, // Allow for development
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});

app.use(limiter);

// CORS
app.use(cors({
  origin: [
    process.env.FRONTEND_URL || &quot;http://localhost:3000&quot;,
    &quot;http://127.0.0.1:3000&quot;,
    &quot;http://172.20.0.5:3000&quot;, // Docker network IP
    /https?:\/\/.+\.ngrok-free\.app$/
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Body parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(join(__dirname, '../dist')));
}

// Setup routes with io injection
const setupRoutes = async () =&gt; {
    const { createGameRoutes } = await import('./routes/games.js');
    const { createVoteRoutes } = await import('./routes/votes.js');
    const authRoutes = await import('./routes/auth.js');

    // Authentication routes (no io needed)
    app.use('/api/auth', authRoutes.default);

    // Game and vote routes (require io for real-time features)
    app.use('/api/games', createGameRoutes(io));
    app.use('/api/votes', createVoteRoutes(io));
};

// Health check endpoint
app.get('/api/health', (req, res) =&gt; {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// Initialize database and start server
async function startServer() {
  try {
    // Initialize database connection
    await initializeDatabase();
    console.log('✅ Database connected successfully');

    // Setup routes and WebSocket
    await setupRoutes();
    setupWebSocket(io);

    // Error handling middleware (must be registered AFTER routes)
    app.use((error, req, res, next) =&gt; {
      console.error('Server Error:', error);
      res.status(500).json({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
      });
    });

    // 404 handler (registered AFTER routes)
    app.use((req, res) =&gt; {
      res.status(404).json({ error: 'Not Found' });
    });

    // Start server
    server.listen(PORT, () =&gt; {
      console.log(`🚀 Server running on port ${PORT}`);
      console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`🌐 Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:3000'}`);
    });

    // Graceful shutdown
    process.on('SIGTERM', () =&gt; {
      console.log('SIGTERM received, shutting down gracefully');
      server.close(() =&gt; {
        console.log('Process terminated');
      });
    });

  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

startServer();

export { io };</content>
    

  </file>
  <file>
    
  
    <path>server/Dockerfile</path>
    
  
    <content># Multi-stage build for optimized backend
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache dumb-init

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install all dependencies (using npm install since no package-lock.json)
RUN npm install --only=production &amp;&amp; npm cache clean --force

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs &amp;&amp; \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy production dependencies from builder
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy application code
COPY --chown=nodejs:nodejs . .

# Create required directories with proper permissions
RUN mkdir -p /app/uploads /app/logs &amp;&amp; \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Set environment
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD node /app/healthcheck.js

# Use dumb-init for proper signal handling
ENTRYPOINT [&quot;dumb-init&quot;, &quot;--&quot;]

# Start the application
CMD [&quot;node&quot;, &quot;/app/server.js&quot;]</content>
    

  </file>
  <file>
    
  
    <path>server/.dockerignore</path>
    
  
    <content># Node.js
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Docker files
Dockerfile*
docker-compose*

# Documentation
README.md
*.md

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
Thumbs.db

# Logs
logs
*.log

# Test files
test/
tests/
*.test.js
*.spec.js

# Coverage
coverage/
.nyc_output

# Runtime data
pids
*.pid
*.seed

# Build artifacts
dist/
build/</content>
    

  </file>
  <file>
    
  
    <path>server/package.json</path>
    
  
    <content>{
  &quot;name&quot;: &quot;two-truths-server&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;Backend server for Two Truths and a Lie game&quot;,
  &quot;main&quot;: &quot;server.js&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node server.js&quot;,
    &quot;dev&quot;: &quot;nodemon server.js&quot;,
    &quot;migrate&quot;: &quot;node scripts/migrate.js&quot;
  },
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;^4.18.2&quot;,
    &quot;socket.io&quot;: &quot;^4.7.4&quot;,
    &quot;pg&quot;: &quot;^8.11.3&quot;,
    &quot;cors&quot;: &quot;^2.8.5&quot;,
    &quot;helmet&quot;: &quot;^7.1.0&quot;,
    &quot;dotenv&quot;: &quot;^16.3.1&quot;,
    &quot;uuid&quot;: &quot;^9.0.1&quot;,
    &quot;express-rate-limit&quot;: &quot;^7.1.5&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;nodemon&quot;: &quot;^3.0.2&quot;
  },
  &quot;keywords&quot;: [&quot;game&quot;, &quot;websocket&quot;, &quot;postgresql&quot;, &quot;real-time&quot;],
  &quot;author&quot;: &quot;TestIO Team&quot;,
  &quot;license&quot;: &quot;MIT&quot;
}</content>
    

  </file>
  <file>
    
  
    <path>server/routes/games.js</path>
    
  
    <content>import express from 'express';
import { v4 as uuidv4 } from 'uuid';
import pool from '../database/connection.js';
import { authenticateAdmin } from '../middleware/auth.js';

export function createGameRoutes(io) {
  const router = express.Router();

// Create a new game (Protected route - requires authentication)
router.post('/', authenticateAdmin, async (req, res) =&gt; {
  try {
    const {
      teammate_name,
      teammate_picture,
      statement_1,
      statement_2,
      statement_3,
      lie_index,
      timer_duration,
      background_music,
      creator_session
    } = req.body;

    // Validate required fields
    if (!teammate_name || !statement_1 || !statement_2 || !statement_3 || lie_index === undefined || !creator_session) {
      return res.status(400).json({
        error: 'Missing required fields',
        required: ['teammate_name', 'statement_1', 'statement_2', 'statement_3', 'lie_index', 'creator_session']
      });
    }

    // Validate lie_index
    if (lie_index &lt; 0 || lie_index &gt; 2) {
      return res.status(400).json({
        error: 'lie_index must be between 0 and 2'
      });
    }

    const gameId = uuidv4();

    const query = `
      INSERT INTO games (
        id, creator_session, teammate_name, teammate_picture, statement_1, statement_2, statement_3,
        lie_index, timer_duration, background_music, game_started
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, true)
      RETURNING *
    `;

    const values = [
      gameId,
      creator_session,
      teammate_name,
      teammate_picture,
      statement_1,
      statement_2,
      statement_3,
      lie_index,
      timer_duration,
      background_music
    ];

    const result = await pool.query(query, values);
    const game = result.rows[0];

    // Start timer if specified
    if (timer_duration) {
      const timerStartTime = Date.now();
      await pool.query(
        'UPDATE games SET timer_start_time = $1 WHERE id = $2',
        [timerStartTime, gameId]
      );

      // Set automatic lie reveal when timer expires
      setTimeout(async () =&gt; {
        try {
          await pool.query(
            'UPDATE games SET lie_revealed = true WHERE id = $1 AND lie_revealed = false',
            [gameId]
          );

          // Notify all clients about lie reveal
          io?.to(`game-${gameId}`).emit('lieRevealed', {
            gameId,
            lieIndex: lie_index,
            revealedBy: 'timer'
          });
        } catch (error) {
          console.error('Error auto-revealing lie:', error);
        }
      }, timer_duration * 1000);
    }

    res.status(201).json({
      success: true,
      game: {
        id: game.id,
        teammate_name: game.teammate_name,
        teammate_picture: game.teammate_picture,
        statements: [game.statement_1, game.statement_2, game.statement_3],
        timer_duration: game.timer_duration,
        timer_start_time: game.timer_start_time,
        background_music: game.background_music,
        created_at: game.created_at
      }
    });

  } catch (error) {
    console.error('Error creating game:', error);
    res.status(500).json({ error: 'Failed to create game' });
  }
});

// Get game by ID
router.get('/:gameId', async (req, res) =&gt; {
  try {
    const { gameId } = req.params;

    const gameQuery = 'SELECT * FROM games WHERE id = $1';
    const gameResult = await pool.query(gameQuery, [gameId]);

    if (gameResult.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    const game = gameResult.rows[0];

    // Get vote counts
    const voteQuery = `
      SELECT voted_statement, COUNT(*) as count
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;
    const voteResult = await pool.query(voteQuery, [gameId]);

    // Initialize vote counts array [0, 0, 0]
    const votes = [0, 0, 0];
    voteResult.rows.forEach(row =&gt; {
      votes[row.voted_statement] = parseInt(row.count);
    });

    res.json({
      success: true,
      game: {
        id: game.id,
        teammate_name: game.teammate_name,
        teammate_picture: game.teammate_picture,
        statements: [game.statement_1, game.statement_2, game.statement_3],
        lie_index: game.lie_revealed ? game.lie_index : null,
        timer_duration: game.timer_duration,
        timer_start_time: game.timer_start_time,
        background_music: game.background_music,
        lie_revealed: game.lie_revealed,
        game_started: game.game_started,
        votes,
        created_at: game.created_at
      }
    });

  } catch (error) {
    console.error('Error fetching game:', error);
    res.status(500).json({ error: 'Failed to fetch game' });
  }
});

// Reveal the lie (admin action)
router.put('/:gameId/reveal-lie', async (req, res) =&gt; {
  try {
    const { gameId } = req.params;
    const { creator_session } = req.body;

    // Verify creator session is provided
    if (!creator_session) {
      return res.status(400).json({ error: 'Creator session required' });
    }

    // Verify that this user is actually the creator of the game
    const creatorCheck = await pool.query(
      'SELECT creator_session FROM games WHERE id = $1',
      [gameId]
    );

    if (creatorCheck.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    if (creatorCheck.rows[0].creator_session !== creator_session) {
      return res.status(403).json({ error: 'Only the game creator can reveal the lie' });
    }

    const result = await pool.query(
      'UPDATE games SET lie_revealed = true WHERE id = $1 AND lie_revealed = false RETURNING lie_index',
      [gameId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found or lie already revealed' });
    }

    const lieIndex = result.rows[0].lie_index;

    // Notify all clients about lie reveal
    io?.to(`game-${gameId}`).emit('lieRevealed', {
      gameId,
      lieIndex,
      revealedBy: 'admin'
    });

    res.json({
      success: true,
      message: 'Lie revealed successfully',
      lieIndex
    });

  } catch (error) {
    console.error('Error revealing lie:', error);
    res.status(500).json({ error: 'Failed to reveal lie' });
  }
});

// Get game statistics
router.get('/:gameId/stats', async (req, res) =&gt; {
  try {
    const { gameId } = req.params;

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    // Get detailed vote statistics
    const statsQuery = `
      SELECT
        voted_statement,
        COUNT(*) as vote_count,
        ARRAY_AGG(voted_at ORDER BY voted_at) as vote_times
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;

    const statsResult = await pool.query(statsQuery, [gameId]);

    const totalVotesQuery = 'SELECT COUNT(*) as total FROM votes WHERE game_id = $1';
    const totalResult = await pool.query(totalVotesQuery, [gameId]);
    const totalVotes = parseInt(totalResult.rows[0].total);

    const stats = {
      totalVotes,
      breakdown: [
        { statement: 0, votes: 0, percentage: 0, voteTimes: [] },
        { statement: 1, votes: 0, percentage: 0, voteTimes: [] },
        { statement: 2, votes: 0, percentage: 0, voteTimes: [] }
      ]
    };

    statsResult.rows.forEach(row =&gt; {
      const votes = parseInt(row.vote_count);
      const percentage = totalVotes &gt; 0 ? Math.round((votes / totalVotes) * 100) : 0;

      stats.breakdown[row.voted_statement] = {
        statement: row.voted_statement,
        votes,
        percentage,
        voteTimes: row.vote_times
      };
    });

    res.json({
      success: true,
      stats
    });

  } catch (error) {
    console.error('Error fetching game stats:', error);
    res.status(500).json({ error: 'Failed to fetch game statistics' });
  }
});

  return router;
}</content>
    

  </file>
  <file>
    
  
    <path>server/routes/votes.js</path>
    
  
    <content>import express from 'express';
import pool from '../database/connection.js';

export function createVoteRoutes(io) {
  const router = express.Router();

// Submit a vote
router.post('/', async (req, res) =&gt; {
  try {
    const { game_id, voted_statement, user_session } = req.body;
    const user_ip = req.ip || req.connection.remoteAddress;
    const user_agent = req.get('User-Agent');

    // Validate required fields
    if (!game_id || voted_statement === undefined || !user_session) {
      return res.status(400).json({
        error: 'Missing required fields',
        required: ['game_id', 'voted_statement', 'user_session']
      });
    }

    // Validate voted_statement
    if (voted_statement &lt; 0 || voted_statement &gt; 2) {
      return res.status(400).json({
        error: 'voted_statement must be between 0 and 2'
      });
    }

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [game_id]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    // Check if user has already voted
    const existingVote = await pool.query(
      'SELECT id FROM votes WHERE game_id = $1 AND user_session = $2',
      [game_id, user_session]
    );

    if (existingVote.rows.length &gt; 0) {
      return res.status(409).json({
        error: 'User has already voted for this game'
      });
    }

    // Insert the vote
    const insertQuery = `
      INSERT INTO votes (game_id, user_session, voted_statement, user_ip, user_agent)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING *
    `;

    const result = await pool.query(insertQuery, [
      game_id,
      user_session,
      voted_statement,
      user_ip,
      user_agent
    ]);

    const vote = result.rows[0];

    // Get updated vote counts
    const voteCountQuery = `
      SELECT voted_statement, COUNT(*) as count
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;
    const voteCountResult = await pool.query(voteCountQuery, [game_id]);

    // Initialize vote counts array [0, 0, 0]
    const votes = [0, 0, 0];
    voteCountResult.rows.forEach(row =&gt; {
      votes[row.voted_statement] = parseInt(row.count);
    });

    // Broadcast updated vote counts to all clients in the game room
    io?.to(`game-${game_id}`).emit('voteUpdate', {
      gameId: game_id,
      votes,
      totalVotes: votes.reduce((a, b) =&gt; a + b, 0)
    });

    res.status(201).json({
      success: true,
      vote: {
        id: vote.id,
        game_id: vote.game_id,
        voted_statement: vote.voted_statement,
        voted_at: vote.voted_at
      },
      currentVotes: votes
    });

  } catch (error) {
    console.error('Error submitting vote:', error);

    // Handle duplicate vote error specifically
    if (error.code === '23505') { // PostgreSQL unique violation
      return res.status(409).json({
        error: 'User has already voted for this game'
      });
    }

    res.status(500).json({ error: 'Failed to submit vote' });
  }
});

// Get votes for a specific game
router.get('/game/:gameId', async (req, res) =&gt; {
  try {
    const { gameId } = req.params;

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    // Get vote counts
    const voteQuery = `
      SELECT voted_statement, COUNT(*) as count
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;
    const result = await pool.query(voteQuery, [gameId]);

    // Initialize vote counts array [0, 0, 0]
    const votes = [0, 0, 0];
    result.rows.forEach(row =&gt; {
      votes[row.voted_statement] = parseInt(row.count);
    });

    const totalVotes = votes.reduce((a, b) =&gt; a + b, 0);

    res.json({
      success: true,
      votes,
      totalVotes,
      breakdown: votes.map((count, index) =&gt; ({
        statement: index,
        votes: count,
        percentage: totalVotes &gt; 0 ? Math.round((count / totalVotes) * 100) : 0
      }))
    });

  } catch (error) {
    console.error('Error fetching votes:', error);
    res.status(500).json({ error: 'Failed to fetch votes' });
  }
});

// Check if user has voted
router.get('/check/:gameId/:userSession', async (req, res) =&gt; {
  try {
    const { gameId, userSession } = req.params;

    const result = await pool.query(
      'SELECT voted_statement FROM votes WHERE game_id = $1 AND user_session = $2',
      [gameId, userSession]
    );

    if (result.rows.length &gt; 0) {
      res.json({
        success: true,
        hasVoted: true,
        votedStatement: result.rows[0].voted_statement
      });
    } else {
      res.json({
        success: true,
        hasVoted: false
      });
    }

  } catch (error) {
    console.error('Error checking vote status:', error);
    res.status(500).json({ error: 'Failed to check vote status' });
  }
});

// Get all votes for a game (admin only - with more details)
router.get('/admin/:gameId', async (req, res) =&gt; {
  try {
    const { gameId } = req.params;

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    const voteQuery = `
      SELECT
        id,
        user_session,
        voted_statement,
        user_ip,
        voted_at
      FROM votes
      WHERE game_id = $1
      ORDER BY voted_at ASC
    `;

    const result = await pool.query(voteQuery, [gameId]);

    res.json({
      success: true,
      votes: result.rows,
      totalVotes: result.rows.length
    });

  } catch (error) {
    console.error('Error fetching admin votes:', error);
    res.status(500).json({ error: 'Failed to fetch vote details' });
  }
});

  return router;
}</content>
    

  </file>
  <file>
    
  
    <path>server/routes/auth.js</path>
    
  
    <content>import express from 'express';
import { handleLogin, handleLogout, handleValidateSession, getSessionInfo } from '../middleware/auth.js';

const router = express.Router();

/**
 * POST /auth/login
 * Authenticate admin user with username/password
 */
router.post('/login', handleLogin);

/**
 * POST /auth/logout
 * Logout admin user and invalidate session
 */
router.post('/logout', handleLogout);

/**
 * GET /auth/validate
 * Validate current session token
 */
router.get('/validate', handleValidateSession);

/**
 * POST /auth/validate
 * Validate session token (also accept POST for flexibility)
 */
router.post('/validate', handleValidateSession);

/**
 * GET /auth/info
 * Get authentication service information (for debugging)
 */
router.get('/info', (req, res) =&gt; {
  try {
    const info = getSessionInfo();
    res.json({
      success: true,
      info: {
        ...info,
        environment: process.env.NODE_ENV || 'development',
        hasAdminCredentials: !!(process.env.ADMIN_USERNAME &amp;&amp; process.env.ADMIN_PASSWORD)
      }
    });
  } catch (error) {
    console.error('❌ Auth info error:', error);
    res.status(500).json({
      error: 'Authentication info service error'
    });
  }
});

export default router;</content>
    

  </file>
  <file>
    
  
    <path>server/env.example</path>
    
  
    <content># Environment Configuration
NODE_ENV=development

# Server Configuration
PORT=3001
FRONTEND_URL=http://localhost:3000

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=two_truths_db
DB_USER=postgres
DB_PASSWORD=password

# For production, use a strong random secret
SESSION_SECRET=your-super-secret-session-key-change-this-in-production

# Admin Authentication
ADMIN_USERNAME=admin
ADMIN_PASSWORD=secure_password_123

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100</content>
    

  </file>
  <file>
    
  
    <path>vite.config.js</path>
    
  
    <content>import { defineConfig } from 'vite';

export default defineConfig({
  root: '.',
  base: './',
  server: {
    host: true,
    port: 3000,
    // Allow tunneling domains like *.ngrok-free.app to prevent 403 (host check)
    allowedHosts: ['localhost', '127.0.0.1', '::1', '.ngrok-free.app']
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    rollupOptions: {
      input: {
        main: './index.html'
      }
    }
  },
  assetsInclude: ['**/*.mp3', '**/*.png', '**/*.svg']
});</content>
    

  </file>
  <file>
    
  
    <path>README.md</path>
    
  
    <content>Link to the demo video: https://drive.google.com/file/d/1VCYe3CKY03eXvpTVRl5WegnMoka0P6G6/view?usp=sharing

![Two Truths and a Lie Game Demo](Screen%20Recording%202025-08-14%20at%2017.35.12.gif)


# Two Truths and a Lie Game

A modern, full-stack interactive web application for playing &quot;Two Truths and a Lie&quot; with teams. Built with Vite, vanilla JavaScript, Phaser 3 for animations, Express.js backend, PostgreSQL database, and real-time WebSocket communication.

![TestIO Squirrel](assets/images/TestIO_squirel.png)

## Features

### 🎮 **Three-Page Experience**
1. **Admin Setup Page** - Configure games with teammate info and statements
2. **Voting Page** - Let participants guess which statement is the lie
3. **Results Page** - Display real-time voting results with animations

### ✨ **Key Functionality**
- **File Uploads**: Profile pictures (images) and background music (MP3)
- **Timer System**: Optional synchronized voting timers (30s, 1min, 2min, 5min)
- **Real-time Updates**: Live voting results using WebSocket communication
- **Persistent Storage**: PostgreSQL database for game data and votes
- **Animations**: Fireworks for correct votes, thumbs-down rain for incorrect votes
- **Responsive Design**: Modern, mobile-friendly interface
- **Default Music**: Elevator music plays if no custom music is uploaded
- **Multi-user Support**: Multiple participants can join and vote simultaneously

### 🎨 **Modern Design**
- Mentimeter-inspired UI with glassmorphism effects
- Gradient backgrounds and smooth animations
- Interactive vote buttons with hover effects
- Real-time progress bars for voting results
- Live participant count updates

## How to Play

### As an Admin (Game Creator):
1. **Set Up Game**:
   - Enter teammate name
   - Upload a profile picture
   - Write three statements (two truths, one lie)
   - Select which statement is the lie
   - Optionally set a voting timer
   - Optionally upload background music

2. **Start Game**:
   - Click &quot;Start Game&quot;
   - Share the generated link with participants
   - Click &quot;Show the Lie&quot; when ready to reveal the answer

### As a Participant:
1. **Join Game**:
   - Click the shared link
   - View the teammate's profile and statements

2. **Vote**:
   - Select which statement you think is the lie
   - Submit your vote
   - View results with animations

## Installation &amp; Setup

### Prerequisites
- Node.js (version 20.15.1 or higher)
- npm or yarn
- Docker and Docker Compose (recommended for easy setup)
- PostgreSQL (if running without Docker)

### Quick Start with Docker (Recommended)
```bash
# Clone or download the project
cd ulidim

# Start all services (database, backend, frontend)
npm run docker:up

# The application will be available at:
# Frontend: http://localhost:3000
# Backend API: http://localhost:3001
# Database: localhost:5432
```

### Manual Development Setup
```bash
# 1. Start the database
npm run docker:up database

# 2. Install frontend dependencies
npm install

# 3. Install backend dependencies
cd server
npm install
cd ..

# 4. Start backend server
npm run backend:dev

# 5. In a new terminal, start frontend
npm run dev
```

### Available Scripts
- `npm run docker:up` - Start all services with Docker
- `npm run docker:down` - Stop all Docker services
- `npm run docker:logs` - View Docker logs
- `npm run dev` - Start frontend development server
- `npm run backend:dev` - Start backend development server
- `npm run fullstack:dev` - Start database + frontend (hybrid approach)

## Technical Stack

### Frontend
- **Framework**: Vite for build tooling and development server
- **Language**: Vanilla JavaScript (ES6+ modules)
- **UI**: HTML5, CSS3 with glassmorphism effects
- **Animations**: Phaser 3 game engine for particle effects
- **Real-time**: Socket.IO client for WebSocket communication

### Backend
- **Runtime**: Node.js with Express.js framework
- **Database**: PostgreSQL with connection pooling
- **Real-time**: Socket.IO for WebSocket communication
- **Security**: Helmet, CORS, rate limiting
- **Session Management**: User session tracking
- **API**: RESTful endpoints with WebSocket events

### Infrastructure
- **Containerization**: Docker and Docker Compose
- **Database**: PostgreSQL 15 with automatic migrations
- **Caching**: Redis (optional, for production scaling)
- **Development**: Hot reload for both frontend and backend

## Project Structure

```
ulidim/
├── index.html                          # Main HTML entry point
├── style.css                           # Frontend styles
├── vite.config.js                      # Vite configuration
├── package.json                        # Frontend dependencies and scripts
├── docker-compose.yml                  # Multi-service Docker setup
├── Dockerfile.frontend                 # Frontend container config
│
├── src/                                # Frontend source code
│   ├── main.js                        # Main application logic
│   ├── api.js                         # API service and WebSocket client
│   └── phaser-config.js               # Phaser 3 configuration
│
├── server/                             # Backend server
│   ├── server.js                      # Main server entry point
│   ├── package.json                   # Backend dependencies
│   ├── Dockerfile                     # Backend container config
│   ├── env.example                    # Environment variables template
│   ├── healthcheck.js                 # Docker health check
│   │
│   ├── database/                      # Database setup
│   │   ├── connection.js              # PostgreSQL connection
│   │   └── init.sql                   # Database initialization
│   │
│   ├── routes/                        # API routes
│   │   ├── games.js                   # Game management endpoints
│   │   └── votes.js                   # Voting endpoints
│   │
│   └── websocket/                     # Real-time communication
│       └── handlers.js                # WebSocket event handlers
│
└── assets/                             # Static assets
    ├── images/                         # Images and icons
    │   ├── TestIO_squirel.png         # Background images
    │   ├── favicon.svg                # Site icon
    │   └── ...                        # Other images
    └── audio/                          # Audio files
        └── elevator_music.mp3         # Default background music
```

## Game Flow

1. **Admin Setup**: Admin creates game with teammate info and statements
2. **Database Storage**: Game data is stored in PostgreSQL database
3. **Link Generation**: System generates unique shareable link with game ID
4. **WebSocket Connection**: Participants establish real-time connection
5. **Participant Voting**: Participants access voting page via link
6. **Real-time Updates**: Votes are stored in database and broadcast via WebSocket
7. **Live Participant Count**: Real-time tracking of active participants
8. **Timer Synchronization**: Optional countdown timer synchronized across all clients
9. **Lie Revelation**: Admin can reveal the correct answer, triggering animations
10. **Persistent Results**: All game data and votes are persistently stored

## Browser Compatibility

- Modern browsers supporting ES6+ features
- Chrome 70+, Firefox 65+, Safari 12+, Edge 79+
- Mobile browsers supported with responsive design

## API Endpoints

### Game Management
- `POST /api/games` - Create a new game
- `GET /api/games/:id` - Get game details
- `PUT /api/games/:id/reveal-lie` - Reveal the lie (admin only)
- `GET /api/games/:id/stats` - Get game statistics

### Voting
- `POST /api/votes` - Submit a vote
- `GET /api/votes/game/:id` - Get all votes for a game
- `GET /api/votes/check/:gameId/:session` - Check if user has voted

### WebSocket Events
- `joinGame` - Join a game room
- `voteUpdate` - Real-time vote updates
- `lieRevealed` - Lie revelation broadcast
- `participantCountUpdate` - Live participant count
- `timerUpdate` - Timer synchronization

## Development

### Environment Variables
Create a `.env` file in the `server/` directory:
```env
NODE_ENV=development
PORT=3001
FRONTEND_URL=http://localhost:3000
DB_HOST=localhost
DB_PORT=5432
DB_NAME=two_truths_db
DB_USER=postgres
DB_PASSWORD=password
SESSION_SECRET=your-secret-key
```

### Key Features Implemented
- ✅ Full-stack architecture with real-time communication
- ✅ PostgreSQL database with persistent storage
- ✅ File upload handling (images and audio)
- ✅ WebSocket-based real-time voting system
- ✅ Timer synchronization across all clients
- ✅ Phaser 3 particle animations
- ✅ Responsive design with modern UI
- ✅ Game state management with database persistence
- ✅ URL-based game sharing with unique IDs
- ✅ Docker containerization for easy deployment
- ✅ Live participant tracking
- ✅ Rate limiting and security measures

## Production Deployment

### Using Docker Compose
```bash
# Build and start all services
docker-compose up -d

# View logs
docker-compose logs -f

# Stop all services
docker-compose down
```

### Environment Configuration
1. Copy `server/env.example` to `server/.env`
2. Update production values:
   - Set strong `SESSION_SECRET`
   - Configure database credentials
   - Set proper `FRONTEND_URL`

### Database Migration
The database will automatically initialize when the PostgreSQL container starts. For manual migration:
```bash
# Connect to the database container
docker exec -it two_truths_db psql -U postgres -d two_truths_db

# Run custom SQL commands if needed
```

## Customization

### Adding Custom Animations
Modify the Phaser 3 animations in `src/phaser-config.js` and related methods in `src/main.js`.

### API Extensions
Add new endpoints in `server/routes/` and corresponding WebSocket events in `server/websocket/handlers.js`.

### Database Schema
Modify `server/database/init.sql` to add new tables or columns as needed.

### Styling Changes
Update `style.css` to modify the visual appearance. The design uses CSS custom properties for easy theming.

## Architecture Overview

```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│   Frontend      │────▶│    Backend      │────▶│   PostgreSQL    │
│   (Vite +       │     │   (Express +    │     │   Database      │
│   Vanilla JS)   │     │   Socket.IO)    │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
         │                        │                        │
         │ WebSocket              │ WebSocket              │
         │ Communication          │ Events                 │
         │                        │                        │
         ▼                        ▼                        ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│  Real-time UI   │     │  Event Handler  │     │  Data Storage   │
│  Updates        │     │  (Game State)   │     │  (Games/Votes)  │
└─────────────────┘     └─────────────────┘     └─────────────────┘
```

## Demo

The application provides a complete full-stack &quot;Two Truths and a Lie&quot; experience:

### Features in Action:
1. **Admin Experience**: Create games, upload files, manage settings, control reveals
2. **Participant Experience**: Join via unique links, vote in real-time, see live results
3. **Real-time Features**:
   - Live voting updates via WebSocket
   - Synchronized timers across all participants
   - Real-time participant count
   - Instant lie revelation
4. **Visual Feedback**: Phaser 3 animations for correct/incorrect votes
5. **Persistent Data**: All games and votes stored in PostgreSQL
6. **Scalable Architecture**: Ready for production deployment

### Technical Highlights:
- **Real-time Communication**: WebSocket-based updates
- **Database Persistence**: PostgreSQL with proper schema
- **Modern Development**: Vite build system with hot reload
- **Containerized Deployment**: Docker Compose for easy setup
- **Security**: Rate limiting, CORS, and input validation

---

Built with ❤️ for team building and fun interactive experiences!

**TestIO Team** - Transforming team interactions through engaging technology.</content>
    

  </file>
  <file>
    
  
    <path>.dockerignore</path>
    
  
    <content># Git and version control
.git
.gitignore
.gitattributes

# Docker files
Dockerfile*
docker-compose*

# Documentation and demo files
README.md
*.md
*.mov
*.gif
*.png
*.jpg

# Node.js
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Memory bank (development only)
memory_bank/

# Build artifacts
dist/
build/</content>
    

  </file>
  <file>
    
  
    <path>.gitignore</path>
    
  
    <content>memory-bank/
isolation_rules
node_modules/
.tool-versions

# Environment files
.env
.env.local
.env.production
.env.staging

# Database
*.db
*.sqlite

# Logs
logs/
*.log
npm-debug.log*

# Docker
.docker/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Temporary files
tmp/
temp/

# Build outputs
dist/
build/

# Server specific
server/.env
server/node_modules/
server/logs/</content>
    

  </file>
  <file>
    
  
    <path>package.json</path>
    
  
    <content>{
  &quot;name&quot;: &quot;two-truths-and-a-lie&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;Interactive Two Truths and a Lie game application&quot;,
  &quot;repository&quot;: {
    &quot;type&quot;: &quot;git&quot;,
    &quot;url&quot;: &quot;git+https://github.com/testio/two-truths-and-a-lie.git&quot;
  },
  &quot;author&quot;: &quot;TestIO Team&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;vite&quot;,
    &quot;build&quot;: &quot;vite build&quot;,
    &quot;preview&quot;: &quot;vite preview&quot;,
    &quot;start&quot;: &quot;vite&quot;,
    &quot;legacy&quot;: &quot;alive-server&quot;,
    &quot;docker:build&quot;: &quot;docker-compose build&quot;,
    &quot;docker:up&quot;: &quot;docker-compose up -d&quot;,
    &quot;docker:down&quot;: &quot;docker-compose down&quot;,
    &quot;docker:logs&quot;: &quot;docker-compose logs -f&quot;,
    &quot;fullstack:dev&quot;: &quot;docker-compose up -d database &amp;&amp; npm run dev&quot;,
    &quot;backend:dev&quot;: &quot;cd server &amp;&amp; npm run dev&quot;,
    &quot;test&quot;: &quot;echo \&quot;No tests specified yet\&quot;&quot;,
    &quot;lint&quot;: &quot;echo \&quot;No linting configured yet\&quot;&quot;
  },
  &quot;keywords&quot;: [
    &quot;game&quot;,
    &quot;interactive&quot;,
    &quot;team-building&quot;,
    &quot;phaser&quot;
  ],
  &quot;devDependencies&quot;: {
    &quot;alive-server&quot;: &quot;^1.3.0&quot;,
    &quot;vite&quot;: &quot;^7.1.2&quot;
  },
  &quot;dependencies&quot;: {
    &quot;phaser&quot;: &quot;^3.88.2&quot;,
    &quot;socket.io&quot;: &quot;^4.7.4&quot;,
    &quot;socket.io-client&quot;: &quot;^4.7.4&quot;
  }
}</content>
    

  </file>
  <file>
    
  
    <path>style.css</path>
    
  
    <content>/* Two Truths and a Lie Game - Pointillism Pop-Art Design */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Comic Sans MS', 'Marker Felt', cursive, -apple-system, BlinkMacSystemFont, sans-serif;
    background:
        radial-gradient(circle at 20% 80%, #ff6b9d 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, #4ecdc4 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, #45b7d1 0%, transparent 50%),
        radial-gradient(circle at 60% 80%, #96ceb4 0%, transparent 50%),
        radial-gradient(circle at 80% 60%, #feca57 0%, transparent 50%),
        #ff9ff3;
    min-height: 100vh;
    overflow-x: hidden;
    position: relative;
}

/* Dotted overlay animation */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image:
        radial-gradient(circle at 10px 10px, rgba(255,255,255,0.3) 1px, transparent 1px),
        radial-gradient(circle at 30px 30px, rgba(0,0,0,0.1) 1px, transparent 1px);
    background-size: 20px 20px, 40px 40px;
    animation: dotMove 8s linear infinite;
    z-index: -1;
    pointer-events: none;
}

@keyframes dotMove {
    0% { transform: translate(0, 0); }
    25% { transform: translate(10px, 5px); }
    50% { transform: translate(5px, 10px); }
    75% { transform: translate(-5px, 5px); }
    100% { transform: translate(0, 0); }
}

.background-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
    opacity: 0.3;
    pointer-events: none;
}

.background-squirrel {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: contrast(1.5) saturate(1.8) hue-rotate(15deg);
    mix-blend-mode: multiply;
}

.main-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

/* Page Management */
.page {
    display: none;
    width: 100%;
    max-width: 600px;
    animation: fadeIn 0.5s ease-in-out;
}

.page.active {
    display: block;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px) scale(0.95); }
    to { opacity: 1; transform: translateY(0) scale(1); }
}

@keyframes popArt {
    0%, 100% { transform: scale(1) rotate(0deg); }
    25% { transform: scale(1.05) rotate(1deg); }
    50% { transform: scale(0.98) rotate(-0.5deg); }
    75% { transform: scale(1.02) rotate(0.5deg); }
}

.page-content {
    background:
        radial-gradient(circle at 15% 15%, rgba(255, 107, 157, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 85% 85%, rgba(78, 205, 196, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 50% 50%, rgba(254, 202, 87, 0.15) 0%, transparent 70%),
        rgba(255, 255, 255, 0.92);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    padding: 40px;
    box-shadow:
        0 0 0 3px rgba(255, 107, 157, 0.3),
        0 0 0 6px rgba(78, 205, 196, 0.2),
        0 0 0 9px rgba(254, 202, 87, 0.1),
        0 15px 35px rgba(0, 0, 0, 0.15);
    border: 3px dotted rgba(255, 107, 157, 0.6);
    position: relative;
    animation: popArt 6s ease-in-out infinite;
}

.page-content::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #ff6b9d, #4ecdc4, #feca57, #45b7d1);
    border-radius: 22px;
    z-index: -1;
    animation: borderShift 4s linear infinite;
}

@keyframes borderShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Typography */
.page-title {
    font-size: 2.8rem;
    font-weight: 900;
    background: linear-gradient(45deg, #ff6b9d, #4ecdc4, #feca57, #45b7d1);
    background-size: 300% 300%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 8px;
    text-align: center;
    text-shadow: 2px 2px 0px rgba(0,0,0,0.1);
    animation: textShimmer 3s ease-in-out infinite;
    letter-spacing: 2px;
    text-transform: uppercase;
}

@keyframes textShimmer {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

.page-subtitle {
    font-size: 1.2rem;
    color: #2c3e50;
    text-align: center;
    margin-bottom: 32px;
    font-weight: 600;
    text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
}

h3 {
    font-size: 1.6rem;
    font-weight: 700;
    background: linear-gradient(135deg, #ff6b9d, #4ecdc4);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 16px;
    position: relative;
}

h3::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    right: 0;
    height: 3px;
    background: repeating-linear-gradient(
        90deg,
        #ff6b9d,
        #ff6b9d 10px,
        transparent 10px,
        transparent 15px
    );
}

/* Form Styles */
.form {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

label {
    font-weight: 500;
    color: #333;
    font-size: 0.95rem;
}

input[type=&quot;text&quot;],
input[type=&quot;file&quot;],
textarea,
select {
    padding: 16px 20px;
    border: 3px dotted #ff6b9d;
    border-radius: 15px;
    font-size: 1.1rem;
    font-family: inherit;
    font-weight: 600;
    transition: all 0.3s ease;
    background:
        radial-gradient(circle at 15% 15%, rgba(255, 107, 157, 0.05) 0%, transparent 50%),
        radial-gradient(circle at 85% 85%, rgba(78, 205, 196, 0.05) 0%, transparent 50%),
        rgba(255, 255, 255, 0.95);
    position: relative;
}

input[type=&quot;text&quot;]:focus,
textarea:focus,
select:focus {
    outline: none;
    border-color: #4ecdc4;
    box-shadow:
        0 0 0 4px rgba(78, 205, 196, 0.3),
        0 8px 25px rgba(78, 205, 196, 0.2);
    transform: scale(1.02);
    background:
        radial-gradient(circle at 15% 15%, rgba(78, 205, 196, 0.08) 0%, transparent 50%),
        radial-gradient(circle at 85% 85%, rgba(255, 107, 157, 0.08) 0%, transparent 50%),
        rgba(255, 255, 255, 0.98);
}

textarea {
    resize: vertical;
    min-height: 80px;
}

.hint {
    font-size: 0.9rem;
    color: #666;
    font-style: italic;
    margin-bottom: 16px;
}

.file-hint {
    font-size: 0.85rem;
    color: #888;
    margin-top: 4px;
}

/* Upload Preview */
.upload-preview {
    margin-top: 12px;
    border-radius: 12px;
    overflow: hidden;
    max-width: 200px;
}

.upload-preview img {
    width: 100%;
    height: auto;
    border-radius: 12px;
}

/* Sections */
.statements-section,
.optional-section {
    border-top: 1px solid #e1e5e9;
    padding-top: 24px;
}

/* Buttons */
.btn {
    padding: 16px 32px;
    border: 4px dotted;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: 800;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    min-height: 60px;
    text-transform: uppercase;
    letter-spacing: 1px;
    position: relative;
    overflow: hidden;
}

.btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 20% 20%, rgba(255,255,255,0.3) 2px, transparent 2px),
        radial-gradient(circle at 60% 60%, rgba(255,255,255,0.2) 1px, transparent 1px);
    background-size: 15px 15px, 25px 25px;
    animation: dotPulse 2s ease-in-out infinite;
    pointer-events: none;
}

@keyframes dotPulse {
    0%, 100% { opacity: 0.3; transform: scale(1); }
    50% { opacity: 0.8; transform: scale(1.05); }
}

.btn-primary {
    background: linear-gradient(135deg, #ff6b9d, #4ecdc4, #feca57);
    background-size: 200% 200%;
    color: white;
    border-color: #ff6b9d;
    box-shadow:
        0 0 0 3px rgba(255, 107, 157, 0.3),
        0 8px 25px rgba(255, 107, 157, 0.4);
    animation: gradientShift 3s ease-in-out infinite;
}

@keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

.btn-primary:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow:
        0 0 0 5px rgba(255, 107, 157, 0.4),
        0 15px 40px rgba(255, 107, 157, 0.6);
    animation-duration: 1.5s;
}

.btn-primary:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    animation: none;
}

.btn-secondary {
    background: linear-gradient(135deg, #ecf0f1, #bdc3c7);
    color: #2c3e50;
    border-color: #4ecdc4;
    box-shadow: 0 0 0 2px rgba(78, 205, 196, 0.3);
}

.btn-secondary:hover {
    background: linear-gradient(135deg, #d5dbdb, #95a5a6);
    transform: translateY(-3px);
    box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.5);
}

.btn-danger {
    background: linear-gradient(135deg, #e74c3c, #c0392b);
    background-size: 200% 200%;
    color: white;
    border-color: #e74c3c;
    box-shadow:
        0 0 0 3px rgba(231, 76, 60, 0.3),
        0 8px 25px rgba(231, 76, 60, 0.4);
    animation: dangerPulse 2s ease-in-out infinite;
}

@keyframes dangerPulse {
    0%, 100% { background-position: 0% 50%; transform: scale(1); }
    50% { background-position: 100% 50%; transform: scale(1.02); }
}

.btn-danger:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow:
        0 0 0 5px rgba(231, 76, 60, 0.5),
        0 15px 40px rgba(231, 76, 60, 0.6);
}

.button-group {
    display: flex;
    gap: 16px;
    justify-content: center;
    margin-top: 32px;
}

/* Game Controls */
.game-controls {
    margin-top: 32px;
    padding: 24px;
    background: rgba(102, 126, 234, 0.1);
    border-radius: 16px;
    border: 1px solid rgba(102, 126, 234, 0.2);
}

.share-link h3 {
    color: #667eea;
    margin-bottom: 8px;
}

.link-container {
    display: flex;
    gap: 12px;
    margin: 16px 0 24px 0;
}

.link-container input {
    flex: 1;
    background: #f8f9fa;
    border: 1px solid #e1e5e9;
}

/* Voting Page Styles */
.participant-info {
    text-align: center;
    margin-bottom: 32px;
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.page-header h2,
.page-header h3 {
    margin: 0;
    flex: 1;
}

.music-toggle-btn {
    padding: 8px 16px;
    font-size: 0.9rem;
    min-width: 120px;
}

.participant-picture {
    width: 140px;
    height: 140px;
    border-radius: 50%;
    overflow: hidden;
    margin: 0 auto 16px;
    border: 6px dotted #ff6b9d;
    box-shadow:
        0 0 0 4px rgba(255, 107, 157, 0.3),
        0 0 0 8px rgba(78, 205, 196, 0.2),
        0 15px 35px rgba(255, 107, 157, 0.4);
    position: relative;
    animation: pictureBounce 4s ease-in-out infinite;
}

@keyframes pictureBounce {
    0%, 100% { transform: scale(1) rotate(0deg); }
    25% { transform: scale(1.05) rotate(2deg); }
    50% { transform: scale(0.98) rotate(-1deg); }
    75% { transform: scale(1.02) rotate(1deg); }
}

.participant-picture::before {
    content: '';
    position: absolute;
    top: -6px;
    left: -6px;
    right: -6px;
    bottom: -6px;
    border-radius: 50%;
    background:
        radial-gradient(circle at 30% 30%, rgba(254, 202, 87, 0.6) 2px, transparent 2px),
        radial-gradient(circle at 70% 70%, rgba(69, 183, 209, 0.4) 1px, transparent 1px);
    background-size: 20px 20px, 15px 15px;
    animation: dotRotate 8s linear infinite;
    z-index: -1;
}

@keyframes dotRotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.participant-picture img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: contrast(1.2) saturate(1.3);
}

#participant-name {
    font-size: 1.8rem;
    font-weight: 600;
    color: #1a1a1a;
}

.voting-section {
    text-align: center;
}

.timer {
    font-size: 2.5rem;
    font-weight: 900;
    background: linear-gradient(45deg, #e74c3c, #f39c12, #e74c3c);
    background-size: 200% 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 16px 0 32px;
    padding: 20px;
    background-color:
        radial-gradient(circle at 20% 20%, rgba(231, 76, 60, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(243, 156, 18, 0.15) 0%, transparent 50%),
        rgba(255, 255, 255, 0.9);
    border-radius: 20px;
    border: 4px dotted #e74c3c;
    position: relative;
    animation: timerPulse 1s ease-in-out infinite;
    text-align: center;
    box-shadow:
        0 0 0 3px rgba(231, 76, 60, 0.3),
        0 10px 30px rgba(231, 76, 60, 0.4);
}

.timer::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 25% 25%, rgba(243, 156, 18, 0.4) 2px, transparent 2px),
        radial-gradient(circle at 75% 75%, rgba(231, 76, 60, 0.3) 1px, transparent 1px);
    background-size: 20px 20px, 30px 30px;
    border-radius: 16px;
    animation: timerDots 3s linear infinite;
    pointer-events: none;
}

@keyframes timerPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

@keyframes timerDots {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.statements {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin: 32px 0;
}

.statement-option {
    display: flex;
    align-items: center;
    gap: 20px;
    padding: 25px;
    background:
        radial-gradient(circle at 10% 10%, rgba(255, 107, 157, 0.08) 0%, transparent 50%),
        radial-gradient(circle at 90% 90%, rgba(78, 205, 196, 0.08) 0%, transparent 50%),
        rgba(255, 255, 255, 0.95);
    border: 3px dotted #ff6b9d;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: left;
    font-size: 1.1rem;
    font-weight: 600;
    position: relative;
    overflow: hidden;
}

.statement-option::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 25% 25%, rgba(254, 202, 87, 0.3) 1px, transparent 1px),
        radial-gradient(circle at 75% 75%, rgba(69, 183, 209, 0.2) 1px, transparent 1px);
    background-size: 20px 20px, 30px 30px;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
}

.statement-option:hover {
    border-color: #4ecdc4;
    background:
        radial-gradient(circle at 10% 10%, rgba(255, 107, 157, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 90% 90%, rgba(78, 205, 196, 0.15) 0%, transparent 50%),
        rgba(255, 255, 255, 0.98);
    transform: translateY(-5px) scale(1.02);
    box-shadow:
        0 0 0 3px rgba(78, 205, 196, 0.4),
        0 8px 25px rgba(78, 205, 196, 0.3);
    animation: statementHover 0.6s ease-in-out;
}

.statement-option:hover::before {
    opacity: 1;
}

@keyframes statementHover {
    0%, 100% { transform: translateY(-5px) scale(1.02); }
    50% { transform: translateY(-7px) scale(1.03); }
}

.statement-option.selected {
    border-color: #feca57;
    background:
        radial-gradient(circle at 10% 10%, rgba(254, 202, 87, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 90% 90%, rgba(255, 107, 157, 0.15) 0%, transparent 50%),
        rgba(255, 255, 255, 0.95);
    box-shadow:
        0 0 0 4px rgba(254, 202, 87, 0.5),
        0 10px 30px rgba(254, 202, 87, 0.4);
    animation: selectedPulse 2s ease-in-out infinite;
}

@keyframes selectedPulse {
    0%, 100% { box-shadow: 0 0 0 4px rgba(254, 202, 87, 0.5), 0 10px 30px rgba(254, 202, 87, 0.4); }
    50% { box-shadow: 0 0 0 6px rgba(254, 202, 87, 0.7), 0 15px 40px rgba(254, 202, 87, 0.6); }
}

.statement-number {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    background: linear-gradient(135deg, #ff6b9d, #4ecdc4);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 800;
    flex-shrink: 0;
    font-size: 1.2rem;
    box-shadow: 0 4px 15px rgba(255, 107, 157, 0.4);
    position: relative;
}

.statement-number::before {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    right: 2px;
    bottom: 2px;
    border-radius: 50%;
    background:
        radial-gradient(circle at 30% 30%, rgba(255,255,255,0.4) 2px, transparent 2px);
    background-size: 8px 8px;
}

.statement-text {
    flex: 1;
    font-weight: 600;
    color: #2c3e50;
    text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
}

/* Results Page Styles */
.results-section {
    margin-top: 24px;
}

.chart-container {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin: 24px 0;
}

.result-bar {
    display: flex;
    align-items: center;
    gap: 16px;
}

.result-label {
    min-width: 100px;
    font-weight: 500;
    color: #333;
    text-align: right;
}

.bar {
    flex: 1;
    height: 40px;
    background: #f1f3f5;
    border-radius: 20px;
    overflow: hidden;
    position: relative;
}

.bar-fill {
    height: 100%;
    background: linear-gradient(135deg, #ff6b9d 0%, #4ecdc4 50%, #feca57 100%);
    background-size: 200% 200%;
    border-radius: 20px;
    transition: width 0.8s ease;
    width: 0%;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding-right: 12px;
    color: white;
    font-weight: 800;
    font-size: 1rem;
    position: relative;
    animation: barShimmer 3s ease-in-out infinite;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
}

.bar-fill::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 20% 50%, rgba(255,255,255,0.4) 1px, transparent 1px),
        radial-gradient(circle at 60% 50%, rgba(255,255,255,0.3) 1px, transparent 1px);
    background-size: 15px 8px, 25px 12px;
    border-radius: 20px;
    animation: dotSlide 4s linear infinite;
}

@keyframes barShimmer {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

@keyframes dotSlide {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

.bar-fill.correct {
    background: linear-gradient(135deg, #2ecc71 0%, #27ae60 50%, #16a085 100%);
    background-size: 200% 200%;
    animation: correctShimmer 2s ease-in-out infinite;
}

@keyframes correctShimmer {
    0%, 100% { background-position: 0% 50%; box-shadow: 0 0 20px rgba(46, 204, 113, 0.6); }
    50% { background-position: 100% 50%; box-shadow: 0 0 30px rgba(46, 204, 113, 0.8); }
}

.bar-fill.incorrect {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 50%, #8e44ad 100%);
    background-size: 200% 200%;
    animation: incorrectShimmer 2s ease-in-out infinite;
}

@keyframes incorrectShimmer {
    0%, 100% { background-position: 0% 50%; box-shadow: 0 0 20px rgba(231, 76, 60, 0.6); }
    50% { background-position: 100% 50%; box-shadow: 0 0 30px rgba(231, 76, 60, 0.8); }
}

.result-percentage {
    min-width: 50px;
    font-weight: 600;
    color: #333;
    text-align: center;
}

.lie-reveal {
    margin-top: 32px;
    padding: 24px;
    background: rgba(255, 107, 107, 0.1);
    border-radius: 16px;
    border: 2px solid rgba(255, 107, 107, 0.2);
    text-align: center;
}

.lie-reveal h3 {
    color: #ee5a52;
    margin-bottom: 16px;
}

.lie-statement {
    font-size: 1.1rem;
    font-weight: 500;
    color: #333;
    padding: 16px;
    background: white;
    border-radius: 12px;
    border: 2px solid rgba(255, 107, 107, 0.3);
}

/* Feedback Animation Container */
.feedback-animation {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 999;
}

/* Responsive Design */
@media (max-width: 768px) {
    .page-content {
        padding: 24px;
        margin: 10px;
    }

    .page-title {
        font-size: 2rem;
    }

    .participant-picture {
        width: 100px;
        height: 100px;
    }

    .link-container {
        flex-direction: column;
    }

    .result-bar {
        flex-direction: column;
        align-items: stretch;
        gap: 8px;
    }

    .result-label {
        text-align: left;
        min-width: auto;
    }

    .page-header {
        flex-direction: column;
        align-items: stretch;
        gap: 12px;
    }

    .page-header h2,
    .page-header h3 {
        text-align: center;
    }

    .music-toggle-btn {
        align-self: center;
        min-width: 140px;
    }
}

/* Loading states */
.loading {
    opacity: 0.6;
    pointer-events: none;
}

.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #667eea;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

/* =============================================================================
   AUTHENTICATION SYSTEM STYLES
   ============================================================================= */

/* Login Page Styles */
.login-page {
    background: inherit;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    position: relative;
    padding: 2rem;
}

.login-card {
    background: rgba(255, 255, 255, 0.95);
    padding: 2.5rem;
    border-radius: 25px;
    border: 3px solid #ff6b9d;
    box-shadow:
        0 15px 35px rgba(255, 107, 157, 0.2),
        0 5px 15px rgba(0, 0, 0, 0.1);
    max-width: 450px;
    width: 100%;
    position: relative;
    backdrop-filter: blur(10px);
}

.login-card::after {
    content: '';
    position: absolute;
    top: 10px;
    left: 10px;
    right: 10px;
    bottom: 10px;
    border: 2px dashed rgba(78, 205, 196, 0.3);
    border-radius: 20px;
    pointer-events: none;
}

.login-title {
    color: #ff6b9d;
    font-size: 2rem;
    margin-bottom: 0.5rem;
    text-align: center;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    font-weight: 700;
}

.login-subtitle {
    color: #666;
    font-size: 1rem;
    text-align: center;
    margin-bottom: 2rem;
}

.login-form {
    position: relative;
    z-index: 2;
}

.login-form .form-group {
    margin-bottom: 1.5rem;
}

.login-form .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #4ecdc4;
    font-weight: 600;
}

.login-form .form-group input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid rgba(255, 107, 157, 0.3);
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.9);
}

.login-form .form-group input:focus {
    outline: none;
    border-color: #ff6b9d;
    box-shadow: 0 0 0 3px rgba(255, 107, 157, 0.2);
    transform: translateY(-2px);
}

.error-message {
    background: rgba(255, 107, 157, 0.1);
    border: 2px solid #ff6b9d;
    color: #d63384;
    padding: 0.75rem;
    border-radius: 10px;
    margin-top: 1rem;
    text-align: center;
    font-weight: 600;
}

/* Admin Controls */
.admin-controls {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
}

.admin-controls .btn {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
}

/* =============================================================================
   TIMER INTERRUPTION MODAL STYLES
   ============================================================================= */

.timer-interruption-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.85);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    backdrop-filter: blur(5px);
    animation: modalFadeIn 0.3s ease-out;
}

.timer-modal-card {
    background: white;
    padding: 2.5rem;
    border-radius: 20px;
    border: 3px solid #feca57;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
    text-align: center;
    max-width: 500px;
    width: 90%;
    position: relative;
    animation: modalSlideIn 0.3s ease-out;
    margin: 1rem;
}

.timer-warning-icon {
    font-size: 3rem;
    color: #ff6b9d;
    margin-bottom: 1rem;
    animation: pulse 1.5s infinite;
    display: block;
}

.modal-title {
    color: #ff6b9d;
    font-size: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 700;
}

.modal-description {
    color: #666;
    font-size: 1rem;
    margin-bottom: 1.5rem;
    line-height: 1.5;
}

.timer-display-modal {
    background: linear-gradient(135deg, #ff6b9d, #4ecdc4);
    color: white;
    padding: 1rem;
    border-radius: 15px;
    margin-bottom: 2rem;
    font-size: 1.25rem;
    font-weight: 700;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
}

.modal-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
}

.modal-buttons .btn {
    flex: 1;
    min-width: 120px;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
}

.btn-danger {
    background: linear-gradient(135deg, #ff6b9d, #ff4757);
    color: white;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
}

.btn-danger:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 157, 0.4);
}

.btn-secondary {
    background: linear-gradient(135deg, #95a5a6, #7f8c8d);
    color: white;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(149, 165, 166, 0.3);
}

.btn-secondary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(149, 165, 166, 0.4);
}

/* Modal Animations */
@keyframes modalFadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes modalSlideIn {
    from {
        opacity: 0;
        transform: translateY(-30px) scale(0.9);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

@keyframes pulse {
    0%, 100% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.1);
    }
}

/* =============================================================================
   RESPONSIVE DESIGN
   ============================================================================= */

@media (max-width: 768px) {
    .login-page {
        padding: 1rem;
    }

    .login-card,
    .timer-modal-card {
        padding: 2rem;
        margin: 1rem;
    }

    .login-title {
        font-size: 1.5rem;
    }

    .modal-buttons {
        flex-direction: column;
    }

    .modal-buttons .btn {
        flex: none;
        width: 100%;
    }

    .admin-controls {
        position: relative;
        top: auto;
        right: auto;
        margin-bottom: 1rem;
        text-align: right;
    }
}

@media (max-width: 480px) {
    .timer-modal-card {
        padding: 1.5rem;
    }

    .timer-warning-icon {
        font-size: 2rem;
    }

    .modal-title {
        font-size: 1.25rem;
    }
}</content>
    

  </file>
  <file>
    
  
    <path>generated-docs/repomix_output.xml</path>
    
  
    <content>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;repository&gt;
&lt;repository_structure&gt;
  &lt;file name=&quot;index.html&quot;/&gt;
  &lt;file name=&quot;.tool-versions&quot;/&gt;
  &lt;directory name=&quot;server&quot;&gt;
    &lt;directory name=&quot;database&quot;&gt;
      &lt;file name=&quot;init.sql&quot;/&gt;
    &lt;/directory&gt;
    &lt;directory name=&quot;websocket&quot;&gt;
      &lt;file name=&quot;handlers.js&quot;/&gt;
    &lt;/directory&gt;
    &lt;file name=&quot;healthcheck.js&quot;/&gt;
    &lt;file name=&quot;server.js&quot;/&gt;
    &lt;file name=&quot;Dockerfile&quot;/&gt;
    &lt;file name=&quot;.dockerignore&quot;/&gt;
    &lt;file name=&quot;package.json&quot;/&gt;
    &lt;directory name=&quot;routes&quot;&gt;
      &lt;file name=&quot;games.js&quot;/&gt;
      &lt;file name=&quot;votes.js&quot;/&gt;
    &lt;/directory&gt;
    &lt;file name=&quot;env.example&quot;/&gt;
  &lt;/directory&gt;
  &lt;file name=&quot;vite.config.js&quot;/&gt;
  &lt;file name=&quot;README.md&quot;/&gt;
  &lt;file name=&quot;.dockerignore&quot;/&gt;
  &lt;file name=&quot;.gitignore&quot;/&gt;
  &lt;file name=&quot;package.json&quot;/&gt;
  &lt;file name=&quot;style.css&quot;/&gt;
  &lt;file name=&quot;Dockerfile.frontend&quot;/&gt;
  &lt;directory name=&quot;memory_bank&quot;&gt;
    &lt;file name=&quot;techContext.md&quot;/&gt;
    &lt;file name=&quot;activeContext.md&quot;/&gt;
    &lt;file name=&quot;progress.md&quot;/&gt;
    &lt;file name=&quot;productContext.md&quot;/&gt;
    &lt;file name=&quot;projectbrief.md&quot;/&gt;
    &lt;file name=&quot;tasks.md&quot;/&gt;
    &lt;file name=&quot;systemPatterns.md&quot;/&gt;
  &lt;/directory&gt;
  &lt;directory name=&quot;src&quot;&gt;
    &lt;file name=&quot;phaser-config.js&quot;/&gt;
    &lt;file name=&quot;main.js&quot;/&gt;
    &lt;file name=&quot;api.js&quot;/&gt;
    &lt;directory name=&quot;services&quot;&gt;
      &lt;file name=&quot;music.js&quot;/&gt;
    &lt;/directory&gt;
  &lt;/directory&gt;
&lt;/repository_structure&gt;
&lt;repository_files&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;index.html&lt;/path&gt;
    
  
    &lt;content&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Two Truths and a Lie&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
    &amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/svg+xml&amp;quot; href=&amp;quot;assets/images/favicon.svg&amp;quot;&amp;gt;

    &amp;lt;script src=&amp;quot;https://cdn.socket.io/4.7.4/socket.io.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/phaser@3.88.2/dist/phaser.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
        &amp;lt;!-- Background with TestIO squirrel --&amp;gt;
        &amp;lt;div class=&amp;quot;background-container&amp;quot;&amp;gt;
            &amp;lt;img src=&amp;quot;assets/images/TestIO_squirel.png&amp;quot; alt=&amp;quot;TestIO Squirrel&amp;quot; class=&amp;quot;background-squirrel&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;!-- Main container --&amp;gt;
        &amp;lt;div class=&amp;quot;main-container&amp;quot;&amp;gt;
            &amp;lt;!-- Admin Setup Page --&amp;gt;
            &amp;lt;div id=&amp;quot;admin-page&amp;quot; class=&amp;quot;page active&amp;quot;&amp;gt;
                &amp;lt;div class=&amp;quot;page-content&amp;quot;&amp;gt;
                    &amp;lt;h1 class=&amp;quot;page-title&amp;quot;&amp;gt;Set up your game&amp;lt;/h1&amp;gt;
                    &amp;lt;p class=&amp;quot;page-subtitle&amp;quot;&amp;gt;Create a &amp;quot;Two Truths and a Lie&amp;quot; game for your team&amp;lt;/p&amp;gt;

                    &amp;lt;form id=&amp;quot;admin-form&amp;quot; class=&amp;quot;form&amp;quot;&amp;gt;
                        &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                            &amp;lt;label for=&amp;quot;teammate-name&amp;quot;&amp;gt;Teammate Name&amp;lt;/label&amp;gt;
                            &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;teammate-name&amp;quot; placeholder=&amp;quot;Enter teammate name&amp;quot; required&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                            &amp;lt;label for=&amp;quot;teammate-picture&amp;quot;&amp;gt;Profile Picture&amp;lt;/label&amp;gt;
                            &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;teammate-picture&amp;quot; accept=&amp;quot;image/*&amp;quot; required&amp;gt;
                            &amp;lt;div class=&amp;quot;upload-preview&amp;quot; id=&amp;quot;picture-preview&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;div class=&amp;quot;statements-section&amp;quot;&amp;gt;
                            &amp;lt;h3&amp;gt;Three Statements&amp;lt;/h3&amp;gt;
                            &amp;lt;p class=&amp;quot;hint&amp;quot;&amp;gt;Two should be true, one should be a lie&amp;lt;/p&amp;gt;

                            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                                &amp;lt;label for=&amp;quot;statement-1&amp;quot;&amp;gt;Statement 1&amp;lt;/label&amp;gt;
                                &amp;lt;textarea id=&amp;quot;statement-1&amp;quot; placeholder=&amp;quot;Enter first statement...&amp;quot; required&amp;gt;&amp;lt;/textarea&amp;gt;
                            &amp;lt;/div&amp;gt;

                            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                                &amp;lt;label for=&amp;quot;statement-2&amp;quot;&amp;gt;Statement 2&amp;lt;/label&amp;gt;
                                &amp;lt;textarea id=&amp;quot;statement-2&amp;quot; placeholder=&amp;quot;Enter second statement...&amp;quot; required&amp;gt;&amp;lt;/textarea&amp;gt;
                            &amp;lt;/div&amp;gt;

                            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                                &amp;lt;label for=&amp;quot;statement-3&amp;quot;&amp;gt;Statement 3&amp;lt;/label&amp;gt;
                                &amp;lt;textarea id=&amp;quot;statement-3&amp;quot; placeholder=&amp;quot;Enter third statement...&amp;quot; required&amp;gt;&amp;lt;/textarea&amp;gt;
                            &amp;lt;/div&amp;gt;

                            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                                &amp;lt;label for=&amp;quot;lie-statement&amp;quot;&amp;gt;Which statement is the lie?&amp;lt;/label&amp;gt;
                                &amp;lt;select id=&amp;quot;lie-statement&amp;quot; required&amp;gt;
                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select the lie&amp;lt;/option&amp;gt;
                                    &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;Statement 1&amp;lt;/option&amp;gt;
                                    &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Statement 2&amp;lt;/option&amp;gt;
                                    &amp;lt;option value=&amp;quot;3&amp;quot;&amp;gt;Statement 3&amp;lt;/option&amp;gt;
                                &amp;lt;/select&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;div class=&amp;quot;optional-section&amp;quot;&amp;gt;
                            &amp;lt;h3&amp;gt;Optional Settings&amp;lt;/h3&amp;gt;

                            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                                &amp;lt;label for=&amp;quot;voting-timer&amp;quot;&amp;gt;Voting Timer&amp;lt;/label&amp;gt;
                                &amp;lt;select id=&amp;quot;voting-timer&amp;quot;&amp;gt;
                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;No timer&amp;lt;/option&amp;gt;
                                    &amp;lt;option value=&amp;quot;30&amp;quot;&amp;gt;30 seconds&amp;lt;/option&amp;gt;
                                    &amp;lt;option value=&amp;quot;60&amp;quot;&amp;gt;1 minute&amp;lt;/option&amp;gt;
                                    &amp;lt;option value=&amp;quot;120&amp;quot;&amp;gt;2 minutes&amp;lt;/option&amp;gt;
                                    &amp;lt;option value=&amp;quot;300&amp;quot;&amp;gt;5 minutes&amp;lt;/option&amp;gt;
                                &amp;lt;/select&amp;gt;
                            &amp;lt;/div&amp;gt;

                            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
                                &amp;lt;label for=&amp;quot;background-music&amp;quot;&amp;gt;Background Music (MP3)&amp;lt;/label&amp;gt;
                                &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;background-music&amp;quot; accept=&amp;quot;audio/mp3&amp;quot;&amp;gt;
                                &amp;lt;p class=&amp;quot;file-hint&amp;quot;&amp;gt;Default: Elevator Music&amp;lt;/p&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;div class=&amp;quot;button-group&amp;quot;&amp;gt;
                            &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Start Game&amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/form&amp;gt;

                    &amp;lt;div id=&amp;quot;game-controls&amp;quot; class=&amp;quot;game-controls&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
                        &amp;lt;div class=&amp;quot;share-link&amp;quot;&amp;gt;
                            &amp;lt;h3&amp;gt;Game Started!&amp;lt;/h3&amp;gt;
                            &amp;lt;p&amp;gt;Share this link with participants:&amp;lt;/p&amp;gt;
                            &amp;lt;div class=&amp;quot;link-container&amp;quot;&amp;gt;
                                &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;game-link&amp;quot; readonly&amp;gt;
                                &amp;lt;button id=&amp;quot;copy-link&amp;quot; class=&amp;quot;btn btn-secondary&amp;quot;&amp;gt;Copy Link&amp;lt;/button&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;button id=&amp;quot;show-lie-btn&amp;quot; class=&amp;quot;btn btn-danger&amp;quot;&amp;gt;Show the Lie&amp;lt;/button&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;!-- Voting Page --&amp;gt;
            &amp;lt;div id=&amp;quot;voting-page&amp;quot; class=&amp;quot;page&amp;quot;&amp;gt;
                &amp;lt;div class=&amp;quot;page-content&amp;quot;&amp;gt;
                    &amp;lt;div class=&amp;quot;participant-info&amp;quot;&amp;gt;
                        &amp;lt;div class=&amp;quot;participant-picture&amp;quot;&amp;gt;
                            &amp;lt;img id=&amp;quot;participant-img&amp;quot; src=&amp;quot;&amp;quot; alt=&amp;quot;Participant&amp;quot;&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;h2 id=&amp;quot;participant-name&amp;quot;&amp;gt;Teammate Name&amp;lt;/h2&amp;gt;
                    &amp;lt;/div&amp;gt;

                    &amp;lt;div class=&amp;quot;voting-section&amp;quot;&amp;gt;
                        &amp;lt;div class=&amp;quot;page-header&amp;quot;&amp;gt;
                            &amp;lt;h3&amp;gt;Which statement is the lie?&amp;lt;/h3&amp;gt;
                            &amp;lt;button class=&amp;quot;music-toggle-btn btn btn-secondary&amp;quot;&amp;gt;🔊 Music On&amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div id=&amp;quot;timer-display&amp;quot; class=&amp;quot;timer&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

                        &amp;lt;div class=&amp;quot;statements&amp;quot;&amp;gt;
                            &amp;lt;button class=&amp;quot;statement-option&amp;quot; data-statement=&amp;quot;1&amp;quot;&amp;gt;
                                &amp;lt;span class=&amp;quot;statement-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;
                                &amp;lt;span class=&amp;quot;statement-text&amp;quot; id=&amp;quot;vote-statement-1&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
                            &amp;lt;/button&amp;gt;

                            &amp;lt;button class=&amp;quot;statement-option&amp;quot; data-statement=&amp;quot;2&amp;quot;&amp;gt;
                                &amp;lt;span class=&amp;quot;statement-number&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;
                                &amp;lt;span class=&amp;quot;statement-text&amp;quot; id=&amp;quot;vote-statement-2&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
                            &amp;lt;/button&amp;gt;

                            &amp;lt;button class=&amp;quot;statement-option&amp;quot; data-statement=&amp;quot;3&amp;quot;&amp;gt;
                                &amp;lt;span class=&amp;quot;statement-number&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;
                                &amp;lt;span class=&amp;quot;statement-text&amp;quot; id=&amp;quot;vote-statement-3&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
                            &amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;button id=&amp;quot;submit-vote&amp;quot; class=&amp;quot;btn btn-primary&amp;quot; disabled&amp;gt;Submit Vote&amp;lt;/button&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;!-- Results Page --&amp;gt;
            &amp;lt;div id=&amp;quot;results-page&amp;quot; class=&amp;quot;page&amp;quot;&amp;gt;
                &amp;lt;div class=&amp;quot;page-content&amp;quot;&amp;gt;
                    &amp;lt;div class=&amp;quot;page-header&amp;quot;&amp;gt;
                        &amp;lt;h2&amp;gt;Results&amp;lt;/h2&amp;gt;
                        &amp;lt;button class=&amp;quot;music-toggle-btn btn btn-secondary&amp;quot;&amp;gt;🔊 Music On&amp;lt;/button&amp;gt;
                    &amp;lt;/div&amp;gt;

                    &amp;lt;div class=&amp;quot;results-section&amp;quot;&amp;gt;
                        &amp;lt;div class=&amp;quot;results-chart&amp;quot;&amp;gt;
                            &amp;lt;h3&amp;gt;Voting Results&amp;lt;/h3&amp;gt;
                            &amp;lt;div class=&amp;quot;chart-container&amp;quot;&amp;gt;
                                &amp;lt;div class=&amp;quot;result-bar&amp;quot; id=&amp;quot;result-1&amp;quot;&amp;gt;
                                    &amp;lt;span class=&amp;quot;result-label&amp;quot;&amp;gt;Statement 1&amp;lt;/span&amp;gt;
                                    &amp;lt;div class=&amp;quot;bar&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;bar-fill&amp;quot; data-percentage=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                                    &amp;lt;/div&amp;gt;
                                    &amp;lt;span class=&amp;quot;result-percentage&amp;quot;&amp;gt;0%&amp;lt;/span&amp;gt;
                                &amp;lt;/div&amp;gt;

                                &amp;lt;div class=&amp;quot;result-bar&amp;quot; id=&amp;quot;result-2&amp;quot;&amp;gt;
                                    &amp;lt;span class=&amp;quot;result-label&amp;quot;&amp;gt;Statement 2&amp;lt;/span&amp;gt;
                                    &amp;lt;div class=&amp;quot;bar&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;bar-fill&amp;quot; data-percentage=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                                    &amp;lt;/div&amp;gt;
                                    &amp;lt;span class=&amp;quot;result-percentage&amp;quot;&amp;gt;0%&amp;lt;/span&amp;gt;
                                &amp;lt;/div&amp;gt;

                                &amp;lt;div class=&amp;quot;result-bar&amp;quot; id=&amp;quot;result-3&amp;quot;&amp;gt;
                                    &amp;lt;span class=&amp;quot;result-label&amp;quot;&amp;gt;Statement 3&amp;lt;/span&amp;gt;
                                    &amp;lt;div class=&amp;quot;bar&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;bar-fill&amp;quot; data-percentage=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                                    &amp;lt;/div&amp;gt;
                                    &amp;lt;span class=&amp;quot;result-percentage&amp;quot;&amp;gt;0%&amp;lt;/span&amp;gt;
                                &amp;lt;/div&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;div id=&amp;quot;lie-reveal&amp;quot; class=&amp;quot;lie-reveal&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
                            &amp;lt;h3&amp;gt;The Lie Was:&amp;lt;/h3&amp;gt;
                            &amp;lt;div class=&amp;quot;lie-statement&amp;quot; id=&amp;quot;revealed-lie&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;

                    &amp;lt;div id=&amp;quot;feedback-animation&amp;quot; class=&amp;quot;feedback-animation&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;!-- Audio element for background music --&amp;gt;
        &amp;lt;audio id=&amp;quot;background-audio&amp;quot; loop&amp;gt;
            &amp;lt;source src=&amp;quot;assets/audio/elevator_music.mp3&amp;quot; type=&amp;quot;audio/mpeg&amp;quot;&amp;gt;
        &amp;lt;/audio&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;!-- Phaser game container for animations --&amp;gt;
    &amp;lt;div id=&amp;quot;phaser-container&amp;quot; style=&amp;quot;position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 1000;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;script src=&amp;quot;src/main.js&amp;quot; type=&amp;quot;module&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;.tool-versions&lt;/path&gt;
    
  
    &lt;content&gt;nodejs 20.15.1&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/database/init.sql&lt;/path&gt;
    
  
    &lt;content&gt;-- Database initialization script
-- This file is automatically executed when the database container starts

-- Create the database if it doesn't exist
CREATE DATABASE two_truths_db;

-- Connect to the database
\c two_truths_db;

-- Create tables (these will be created by the application migration as well)
-- This is just a backup in case the application doesn't run migrations

-- Games table
CREATE TABLE IF NOT EXISTS games (
    id VARCHAR(255) PRIMARY KEY,
    creator_session VARCHAR(255) NOT NULL,
    teammate_name VARCHAR(255) NOT NULL,
    teammate_picture TEXT,
    statement_1 TEXT NOT NULL,
    statement_2 TEXT NOT NULL,
    statement_3 TEXT NOT NULL,
    lie_index INTEGER NOT NULL CHECK (lie_index &amp;gt;= 0 AND lie_index &amp;lt;= 2),
    timer_duration INTEGER,
    timer_start_time BIGINT,
    background_music TEXT,
    lie_revealed BOOLEAN DEFAULT FALSE,
    game_started BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Votes table
CREATE TABLE IF NOT EXISTS votes (
    id SERIAL PRIMARY KEY,
    game_id VARCHAR(255) REFERENCES games(id) ON DELETE CASCADE,
    user_session VARCHAR(255) NOT NULL,
    voted_statement INTEGER NOT NULL CHECK (voted_statement &amp;gt;= 0 AND voted_statement &amp;lt;= 2),
    user_ip VARCHAR(45),
    user_agent TEXT,
    voted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(game_id, user_session)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_votes_game_id ON votes(game_id);
CREATE INDEX IF NOT EXISTS idx_games_created_at ON games(created_at);
CREATE INDEX IF NOT EXISTS idx_votes_voted_at ON votes(voted_at);
CREATE INDEX IF NOT EXISTS idx_games_lie_revealed ON games(lie_revealed);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for games table
DROP TRIGGER IF EXISTS update_games_updated_at ON games;
CREATE TRIGGER update_games_updated_at
    BEFORE UPDATE ON games
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Insert some sample data for testing (optional)
-- INSERT INTO games (id, teammate_name, teammate_picture, statement_1, statement_2, statement_3, lie_index, timer_duration)
-- VALUES ('sample-game-id', 'John Doe', 'data:image/jpeg;base64,...', 'I have visited 15 countries', 'I can speak 3 languages', 'I once met a celebrity', 1, 120);

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/websocket/handlers.js&lt;/path&gt;
    
  
    &lt;content&gt;import pool from '../database/connection.js';

export const setupWebSocket = (io) =&amp;gt; {
  // Track connected users per game
  const gameRooms = new Map();

  io.on('connection', (socket) =&amp;gt; {
    console.log(`🔌 User connected: ${socket.id}`);

    // Join a game room
    socket.on('joinGame', async (data) =&amp;gt; {
      try {
        const { gameId, userSession, isAdmin = false } = data;

        if (!gameId) {
          socket.emit('error', { message: 'Game ID is required' });
          return;
        }

        // Check if game exists
        const gameResult = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
        if (gameResult.rows.length === 0) {
          socket.emit('error', { message: 'Game not found' });
          return;
        }

        // Join the game room
        socket.join(`game-${gameId}`);
        socket.gameId = gameId;
        socket.userSession = userSession;
        socket.isAdmin = isAdmin;

        // Track users in game
        if (!gameRooms.has(gameId)) {
          gameRooms.set(gameId, new Set());
        }
        gameRooms.get(gameId).add({
          socketId: socket.id,
          userSession,
          isAdmin,
          joinedAt: new Date()
        });

        console.log(`👥 User ${userSession} joined game ${gameId} (Admin: ${isAdmin})`);

        // Send current game state to the newly joined user
        await sendGameUpdate(socket, gameId);

        // Notify other users in the room about new participant
        socket.to(`game-${gameId}`).emit('userJoined', {
          userSession,
          isAdmin,
          timestamp: new Date()
        });

        // Send updated participant count
        const participantCount = gameRooms.get(gameId).size;
        io.to(`game-${gameId}`).emit('participantCountUpdate', {
          count: participantCount
        });

      } catch (error) {
        console.error('Error joining game:', error);
        socket.emit('error', { message: 'Failed to join game' });
      }
    });

    // Request real-time updates for votes
    socket.on('requestVoteUpdate', async (data) =&amp;gt; {
      try {
        const { gameId } = data;

        if (socket.gameId !== gameId) {
          socket.emit('error', { message: 'Not authorized for this game' });
          return;
        }

        await sendVoteUpdate(socket, gameId);
      } catch (error) {
        console.error('Error requesting vote update:', error);
        socket.emit('error', { message: 'Failed to get vote update' });
      }
    });

    // Admin reveals the lie
    socket.on('revealLie', async (data) =&amp;gt; {
      try {
        const { gameId } = data;

        if (!socket.isAdmin || socket.gameId !== gameId) {
          socket.emit('error', { message: 'Not authorized to reveal lie' });
          return;
        }

        // Verify that this user is actually the creator of the game
        const creatorCheck = await pool.query(
          'SELECT creator_session FROM games WHERE id = $1',
          [gameId]
        );

        if (creatorCheck.rows.length === 0) {
          socket.emit('error', { message: 'Game not found' });
          return;
        }

        if (creatorCheck.rows[0].creator_session !== socket.userSession) {
          socket.emit('error', { message: 'Only the game creator can reveal the lie' });
          return;
        }

        // Update database to mark lie as revealed
        const result = await pool.query(
          'UPDATE games SET lie_revealed = true WHERE id = $1 AND lie_revealed = false RETURNING lie_index',
          [gameId]
        );

        if (result.rows.length === 0) {
          socket.emit('error', { message: 'Game not found or lie already revealed' });
          return;
        }

        const lieIndex = result.rows[0].lie_index;

        // Notify all clients in the game room
        io.to(`game-${gameId}`).emit('lieRevealed', {
          gameId,
          lieIndex,
          revealedBy: 'admin',
          timestamp: new Date()
        });

        console.log(`🎯 Admin revealed lie for game ${gameId}: statement ${lieIndex}`);

      } catch (error) {
        console.error('Error revealing lie:', error);
        socket.emit('error', { message: 'Failed to reveal lie' });
      }
    });

    // Handle timer updates
    socket.on('timerUpdate', (data) =&amp;gt; {
      try {
        const { gameId, timeRemaining } = data;

        if (!socket.isAdmin || socket.gameId !== gameId) {
          return;
        }

        // Broadcast timer update to all participants
        socket.to(`game-${gameId}`).emit('timerUpdate', {
          timeRemaining,
          timestamp: new Date()
        });

      } catch (error) {
        console.error('Error updating timer:', error);
      }
    });

    // Handle disconnection
    socket.on('disconnect', () =&amp;gt; {
      console.log(`🔌 User disconnected: ${socket.id}`);

      if (socket.gameId &amp;amp;&amp;amp; gameRooms.has(socket.gameId)) {
        const gameUsers = gameRooms.get(socket.gameId);

        // Remove user from game room tracking
        const userToRemove = Array.from(gameUsers).find(user =&amp;gt; user.socketId === socket.id);
        if (userToRemove) {
          gameUsers.delete(userToRemove);

          // Notify remaining users
          socket.to(`game-${socket.gameId}`).emit('userLeft', {
            userSession: socket.userSession,
            isAdmin: socket.isAdmin,
            timestamp: new Date()
          });

          // Send updated participant count
          const participantCount = gameUsers.size;
          io.to(`game-${socket.gameId}`).emit('participantCountUpdate', {
            count: participantCount
          });

          // Clean up empty game rooms
          if (gameUsers.size === 0) {
            gameRooms.delete(socket.gameId);
            console.log(`🧹 Cleaned up empty game room: ${socket.gameId}`);
          }
        }
      }
    });

    // Ping/pong for connection health
    socket.on('ping', () =&amp;gt; {
      socket.emit('pong');
    });

  });

  // Helper function to send complete game state
  const sendGameUpdate = async (socket, gameId) =&amp;gt; {
    try {
      const gameQuery = 'SELECT * FROM games WHERE id = $1';
      const gameResult = await pool.query(gameQuery, [gameId]);

      if (gameResult.rows.length === 0) {
        socket.emit('error', { message: 'Game not found' });
        return;
      }

      const game = gameResult.rows[0];

      // Get current vote counts
      const voteQuery = `
        SELECT voted_statement, COUNT(*) as count
        FROM votes
        WHERE game_id = $1
        GROUP BY voted_statement
        ORDER BY voted_statement
      `;
      const voteResult = await pool.query(voteQuery, [gameId]);

      const votes = [0, 0, 0];
      voteResult.rows.forEach(row =&amp;gt; {
        votes[row.voted_statement] = parseInt(row.count);
      });

      socket.emit('gameUpdate', {
        gameId: game.id,
        teammate_name: game.teammate_name,
        teammate_picture: game.teammate_picture,
        statements: [game.statement_1, game.statement_2, game.statement_3],
        lie_index: game.lie_revealed ? game.lie_index : null,
        timer_duration: game.timer_duration,
        timer_start_time: game.timer_start_time,
        lie_revealed: game.lie_revealed,
        votes,
        totalVotes: votes.reduce((a, b) =&amp;gt; a + b, 0),
        timestamp: new Date()
      });

    } catch (error) {
      console.error('Error sending game update:', error);
      socket.emit('error', { message: 'Failed to get game update' });
    }
  };

  // Helper function to send vote updates
  const sendVoteUpdate = async (socket, gameId) =&amp;gt; {
    try {
      const voteQuery = `
        SELECT voted_statement, COUNT(*) as count
        FROM votes
        WHERE game_id = $1
        GROUP BY voted_statement
        ORDER BY voted_statement
      `;
      const result = await pool.query(voteQuery, [gameId]);

      const votes = [0, 0, 0];
      result.rows.forEach(row =&amp;gt; {
        votes[row.voted_statement] = parseInt(row.count);
      });

      socket.emit('voteUpdate', {
        gameId,
        votes,
        totalVotes: votes.reduce((a, b) =&amp;gt; a + b, 0),
        timestamp: new Date()
      });

    } catch (error) {
      console.error('Error sending vote update:', error);
      socket.emit('error', { message: 'Failed to get vote update' });
    }
  };

  // Periodic cleanup of inactive games (every 30 minutes)
  setInterval(async () =&amp;gt; {
    try {
      const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 hours ago
      const result = await pool.query(
        'DELETE FROM games WHERE created_at &amp;lt; $1 AND lie_revealed = true',
        [cutoffTime]
      );

      if (result.rowCount &amp;gt; 0) {
        console.log(`🧹 Cleaned up ${result.rowCount} old games`);
      }
    } catch (error) {
      console.error('Error cleaning up old games:', error);
    }
  }, 30 * 60 * 1000); // 30 minutes

  console.log('🔌 WebSocket handlers setup complete');
};&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/healthcheck.js&lt;/path&gt;
    
  
    &lt;content&gt;import http from 'http';

const options = {
  hostname: 'localhost',
  port: 3001,
  path: '/api/health',
  method: 'GET',
  timeout: 3000
};

const req = http.request(options, (res) =&amp;gt; {
  if (res.statusCode === 200) {
    process.exit(0);
  } else {
    console.error(`Health check failed with status: ${res.statusCode}`);
    process.exit(1);
  }
});

req.on('error', (err) =&amp;gt; {
  console.error(`Health check failed: ${err.message}`);
  process.exit(1);
});

req.on('timeout', () =&amp;gt; {
  console.error('Health check timed out');
  req.destroy();
  process.exit(1);
});

req.end();&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/server.js&lt;/path&gt;
    
  
    &lt;content&gt;import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

import { initializeDatabase } from './database/connection.js';
import { setupWebSocket } from './websocket/handlers.js';

// Load environment variables
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL || &amp;quot;http://localhost:3000&amp;quot;,
    methods: [&amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;, &amp;quot;PUT&amp;quot;, &amp;quot;DELETE&amp;quot;]
  }
});

const PORT = process.env.PORT || 3001;

// Security middleware
app.use(helmet({
  contentSecurityPolicy: false, // Allow for development
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});

app.use(limiter);

// CORS
app.use(cors({
  origin: [
    process.env.FRONTEND_URL || &amp;quot;http://localhost:3000&amp;quot;,
    &amp;quot;http://127.0.0.1:3000&amp;quot;,
    &amp;quot;http://172.20.0.5:3000&amp;quot;, // Docker network IP
    /https?:\/\/.+\.ngrok-free\.app$/
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Body parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(join(__dirname, '../dist')));
}

// Setup routes with io injection
const setupRoutes = async () =&amp;gt; {
    const { createGameRoutes } = await import('./routes/games.js');
    const { createVoteRoutes } = await import('./routes/votes.js');

    app.use('/api/games', createGameRoutes(io));
    app.use('/api/votes', createVoteRoutes(io));
};

// Health check endpoint
app.get('/api/health', (req, res) =&amp;gt; {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// Initialize database and start server
async function startServer() {
  try {
    // Initialize database connection
    await initializeDatabase();
    console.log('✅ Database connected successfully');

    // Setup routes and WebSocket
    await setupRoutes();
    setupWebSocket(io);

    // Error handling middleware (must be registered AFTER routes)
    app.use((error, req, res, next) =&amp;gt; {
      console.error('Server Error:', error);
      res.status(500).json({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
      });
    });

    // 404 handler (registered AFTER routes)
    app.use((req, res) =&amp;gt; {
      res.status(404).json({ error: 'Not Found' });
    });

    // Start server
    server.listen(PORT, () =&amp;gt; {
      console.log(`🚀 Server running on port ${PORT}`);
      console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`🌐 Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:3000'}`);
    });

    // Graceful shutdown
    process.on('SIGTERM', () =&amp;gt; {
      console.log('SIGTERM received, shutting down gracefully');
      server.close(() =&amp;gt; {
        console.log('Process terminated');
      });
    });

  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

startServer();

export { io };&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/Dockerfile&lt;/path&gt;
    
  
    &lt;content&gt;# Multi-stage build for optimized backend
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache dumb-init

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install all dependencies (using npm install since no package-lock.json)
RUN npm install --only=production &amp;amp;&amp;amp; npm cache clean --force

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs &amp;amp;&amp;amp; \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy production dependencies from builder
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy application code
COPY --chown=nodejs:nodejs . .

# Create required directories with proper permissions
RUN mkdir -p /app/uploads /app/logs &amp;amp;&amp;amp; \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Set environment
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD node /app/healthcheck.js

# Use dumb-init for proper signal handling
ENTRYPOINT [&amp;quot;dumb-init&amp;quot;, &amp;quot;--&amp;quot;]

# Start the application
CMD [&amp;quot;node&amp;quot;, &amp;quot;/app/server.js&amp;quot;]&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/.dockerignore&lt;/path&gt;
    
  
    &lt;content&gt;# Node.js
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Docker files
Dockerfile*
docker-compose*

# Documentation
README.md
*.md

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
Thumbs.db

# Logs
logs
*.log

# Test files
test/
tests/
*.test.js
*.spec.js

# Coverage
coverage/
.nyc_output

# Runtime data
pids
*.pid
*.seed

# Build artifacts
dist/
build/&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/package.json&lt;/path&gt;
    
  
    &lt;content&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;two-truths-server&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Backend server for Two Truths and a Lie game&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;server.js&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;node server.js&amp;quot;,
    &amp;quot;dev&amp;quot;: &amp;quot;nodemon server.js&amp;quot;,
    &amp;quot;migrate&amp;quot;: &amp;quot;node scripts/migrate.js&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;express&amp;quot;: &amp;quot;^4.18.2&amp;quot;,
    &amp;quot;socket.io&amp;quot;: &amp;quot;^4.7.4&amp;quot;,
    &amp;quot;pg&amp;quot;: &amp;quot;^8.11.3&amp;quot;,
    &amp;quot;cors&amp;quot;: &amp;quot;^2.8.5&amp;quot;,
    &amp;quot;helmet&amp;quot;: &amp;quot;^7.1.0&amp;quot;,
    &amp;quot;dotenv&amp;quot;: &amp;quot;^16.3.1&amp;quot;,
    &amp;quot;uuid&amp;quot;: &amp;quot;^9.0.1&amp;quot;,
    &amp;quot;express-rate-limit&amp;quot;: &amp;quot;^7.1.5&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;nodemon&amp;quot;: &amp;quot;^3.0.2&amp;quot;
  },
  &amp;quot;keywords&amp;quot;: [&amp;quot;game&amp;quot;, &amp;quot;websocket&amp;quot;, &amp;quot;postgresql&amp;quot;, &amp;quot;real-time&amp;quot;],
  &amp;quot;author&amp;quot;: &amp;quot;TestIO Team&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;
}&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/routes/games.js&lt;/path&gt;
    
  
    &lt;content&gt;import express from 'express';
import { v4 as uuidv4 } from 'uuid';
import pool from '../database/connection.js';

export function createGameRoutes(io) {
  const router = express.Router();

// Create a new game
router.post('/', async (req, res) =&amp;gt; {
  try {
    const {
      teammate_name,
      teammate_picture,
      statement_1,
      statement_2,
      statement_3,
      lie_index,
      timer_duration,
      background_music,
      creator_session
    } = req.body;

    // Validate required fields
    if (!teammate_name || !statement_1 || !statement_2 || !statement_3 || lie_index === undefined || !creator_session) {
      return res.status(400).json({
        error: 'Missing required fields',
        required: ['teammate_name', 'statement_1', 'statement_2', 'statement_3', 'lie_index', 'creator_session']
      });
    }

    // Validate lie_index
    if (lie_index &amp;lt; 0 || lie_index &amp;gt; 2) {
      return res.status(400).json({
        error: 'lie_index must be between 0 and 2'
      });
    }

    const gameId = uuidv4();

    const query = `
      INSERT INTO games (
        id, creator_session, teammate_name, teammate_picture, statement_1, statement_2, statement_3,
        lie_index, timer_duration, background_music, game_started
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, true)
      RETURNING *
    `;

    const values = [
      gameId,
      creator_session,
      teammate_name,
      teammate_picture,
      statement_1,
      statement_2,
      statement_3,
      lie_index,
      timer_duration,
      background_music
    ];

    const result = await pool.query(query, values);
    const game = result.rows[0];

    // Start timer if specified
    if (timer_duration) {
      const timerStartTime = Date.now();
      await pool.query(
        'UPDATE games SET timer_start_time = $1 WHERE id = $2',
        [timerStartTime, gameId]
      );

      // Set automatic lie reveal when timer expires
      setTimeout(async () =&amp;gt; {
        try {
          await pool.query(
            'UPDATE games SET lie_revealed = true WHERE id = $1 AND lie_revealed = false',
            [gameId]
          );

          // Notify all clients about lie reveal
          io?.to(`game-${gameId}`).emit('lieRevealed', {
            gameId,
            lieIndex: lie_index,
            revealedBy: 'timer'
          });
        } catch (error) {
          console.error('Error auto-revealing lie:', error);
        }
      }, timer_duration * 1000);
    }

    res.status(201).json({
      success: true,
      game: {
        id: game.id,
        teammate_name: game.teammate_name,
        teammate_picture: game.teammate_picture,
        statements: [game.statement_1, game.statement_2, game.statement_3],
        timer_duration: game.timer_duration,
        timer_start_time: game.timer_start_time,
        background_music: game.background_music,
        created_at: game.created_at
      }
    });

  } catch (error) {
    console.error('Error creating game:', error);
    res.status(500).json({ error: 'Failed to create game' });
  }
});

// Get game by ID
router.get('/:gameId', async (req, res) =&amp;gt; {
  try {
    const { gameId } = req.params;

    const gameQuery = 'SELECT * FROM games WHERE id = $1';
    const gameResult = await pool.query(gameQuery, [gameId]);

    if (gameResult.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    const game = gameResult.rows[0];

    // Get vote counts
    const voteQuery = `
      SELECT voted_statement, COUNT(*) as count
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;
    const voteResult = await pool.query(voteQuery, [gameId]);

    // Initialize vote counts array [0, 0, 0]
    const votes = [0, 0, 0];
    voteResult.rows.forEach(row =&amp;gt; {
      votes[row.voted_statement] = parseInt(row.count);
    });

    res.json({
      success: true,
      game: {
        id: game.id,
        teammate_name: game.teammate_name,
        teammate_picture: game.teammate_picture,
        statements: [game.statement_1, game.statement_2, game.statement_3],
        lie_index: game.lie_revealed ? game.lie_index : null,
        timer_duration: game.timer_duration,
        timer_start_time: game.timer_start_time,
        background_music: game.background_music,
        lie_revealed: game.lie_revealed,
        game_started: game.game_started,
        votes,
        created_at: game.created_at
      }
    });

  } catch (error) {
    console.error('Error fetching game:', error);
    res.status(500).json({ error: 'Failed to fetch game' });
  }
});

// Reveal the lie (admin action)
router.put('/:gameId/reveal-lie', async (req, res) =&amp;gt; {
  try {
    const { gameId } = req.params;
    const { creator_session } = req.body;

    // Verify creator session is provided
    if (!creator_session) {
      return res.status(400).json({ error: 'Creator session required' });
    }

    // Verify that this user is actually the creator of the game
    const creatorCheck = await pool.query(
      'SELECT creator_session FROM games WHERE id = $1',
      [gameId]
    );

    if (creatorCheck.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    if (creatorCheck.rows[0].creator_session !== creator_session) {
      return res.status(403).json({ error: 'Only the game creator can reveal the lie' });
    }

    const result = await pool.query(
      'UPDATE games SET lie_revealed = true WHERE id = $1 AND lie_revealed = false RETURNING lie_index',
      [gameId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found or lie already revealed' });
    }

    const lieIndex = result.rows[0].lie_index;

    // Notify all clients about lie reveal
    io?.to(`game-${gameId}`).emit('lieRevealed', {
      gameId,
      lieIndex,
      revealedBy: 'admin'
    });

    res.json({
      success: true,
      message: 'Lie revealed successfully',
      lieIndex
    });

  } catch (error) {
    console.error('Error revealing lie:', error);
    res.status(500).json({ error: 'Failed to reveal lie' });
  }
});

// Get game statistics
router.get('/:gameId/stats', async (req, res) =&amp;gt; {
  try {
    const { gameId } = req.params;

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    // Get detailed vote statistics
    const statsQuery = `
      SELECT
        voted_statement,
        COUNT(*) as vote_count,
        ARRAY_AGG(voted_at ORDER BY voted_at) as vote_times
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;

    const statsResult = await pool.query(statsQuery, [gameId]);

    const totalVotesQuery = 'SELECT COUNT(*) as total FROM votes WHERE game_id = $1';
    const totalResult = await pool.query(totalVotesQuery, [gameId]);
    const totalVotes = parseInt(totalResult.rows[0].total);

    const stats = {
      totalVotes,
      breakdown: [
        { statement: 0, votes: 0, percentage: 0, voteTimes: [] },
        { statement: 1, votes: 0, percentage: 0, voteTimes: [] },
        { statement: 2, votes: 0, percentage: 0, voteTimes: [] }
      ]
    };

    statsResult.rows.forEach(row =&amp;gt; {
      const votes = parseInt(row.vote_count);
      const percentage = totalVotes &amp;gt; 0 ? Math.round((votes / totalVotes) * 100) : 0;

      stats.breakdown[row.voted_statement] = {
        statement: row.voted_statement,
        votes,
        percentage,
        voteTimes: row.vote_times
      };
    });

    res.json({
      success: true,
      stats
    });

  } catch (error) {
    console.error('Error fetching game stats:', error);
    res.status(500).json({ error: 'Failed to fetch game statistics' });
  }
});

  return router;
}&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/routes/votes.js&lt;/path&gt;
    
  
    &lt;content&gt;import express from 'express';
import pool from '../database/connection.js';

export function createVoteRoutes(io) {
  const router = express.Router();

// Submit a vote
router.post('/', async (req, res) =&amp;gt; {
  try {
    const { game_id, voted_statement, user_session } = req.body;
    const user_ip = req.ip || req.connection.remoteAddress;
    const user_agent = req.get('User-Agent');

    // Validate required fields
    if (!game_id || voted_statement === undefined || !user_session) {
      return res.status(400).json({
        error: 'Missing required fields',
        required: ['game_id', 'voted_statement', 'user_session']
      });
    }

    // Validate voted_statement
    if (voted_statement &amp;lt; 0 || voted_statement &amp;gt; 2) {
      return res.status(400).json({
        error: 'voted_statement must be between 0 and 2'
      });
    }

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [game_id]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    // Check if user has already voted
    const existingVote = await pool.query(
      'SELECT id FROM votes WHERE game_id = $1 AND user_session = $2',
      [game_id, user_session]
    );

    if (existingVote.rows.length &amp;gt; 0) {
      return res.status(409).json({
        error: 'User has already voted for this game'
      });
    }

    // Insert the vote
    const insertQuery = `
      INSERT INTO votes (game_id, user_session, voted_statement, user_ip, user_agent)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING *
    `;

    const result = await pool.query(insertQuery, [
      game_id,
      user_session,
      voted_statement,
      user_ip,
      user_agent
    ]);

    const vote = result.rows[0];

    // Get updated vote counts
    const voteCountQuery = `
      SELECT voted_statement, COUNT(*) as count
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;
    const voteCountResult = await pool.query(voteCountQuery, [game_id]);

    // Initialize vote counts array [0, 0, 0]
    const votes = [0, 0, 0];
    voteCountResult.rows.forEach(row =&amp;gt; {
      votes[row.voted_statement] = parseInt(row.count);
    });

    // Broadcast updated vote counts to all clients in the game room
    io?.to(`game-${game_id}`).emit('voteUpdate', {
      gameId: game_id,
      votes,
      totalVotes: votes.reduce((a, b) =&amp;gt; a + b, 0)
    });

    res.status(201).json({
      success: true,
      vote: {
        id: vote.id,
        game_id: vote.game_id,
        voted_statement: vote.voted_statement,
        voted_at: vote.voted_at
      },
      currentVotes: votes
    });

  } catch (error) {
    console.error('Error submitting vote:', error);

    // Handle duplicate vote error specifically
    if (error.code === '23505') { // PostgreSQL unique violation
      return res.status(409).json({
        error: 'User has already voted for this game'
      });
    }

    res.status(500).json({ error: 'Failed to submit vote' });
  }
});

// Get votes for a specific game
router.get('/game/:gameId', async (req, res) =&amp;gt; {
  try {
    const { gameId } = req.params;

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    // Get vote counts
    const voteQuery = `
      SELECT voted_statement, COUNT(*) as count
      FROM votes
      WHERE game_id = $1
      GROUP BY voted_statement
      ORDER BY voted_statement
    `;
    const result = await pool.query(voteQuery, [gameId]);

    // Initialize vote counts array [0, 0, 0]
    const votes = [0, 0, 0];
    result.rows.forEach(row =&amp;gt; {
      votes[row.voted_statement] = parseInt(row.count);
    });

    const totalVotes = votes.reduce((a, b) =&amp;gt; a + b, 0);

    res.json({
      success: true,
      votes,
      totalVotes,
      breakdown: votes.map((count, index) =&amp;gt; ({
        statement: index,
        votes: count,
        percentage: totalVotes &amp;gt; 0 ? Math.round((count / totalVotes) * 100) : 0
      }))
    });

  } catch (error) {
    console.error('Error fetching votes:', error);
    res.status(500).json({ error: 'Failed to fetch votes' });
  }
});

// Check if user has voted
router.get('/check/:gameId/:userSession', async (req, res) =&amp;gt; {
  try {
    const { gameId, userSession } = req.params;

    const result = await pool.query(
      'SELECT voted_statement FROM votes WHERE game_id = $1 AND user_session = $2',
      [gameId, userSession]
    );

    if (result.rows.length &amp;gt; 0) {
      res.json({
        success: true,
        hasVoted: true,
        votedStatement: result.rows[0].voted_statement
      });
    } else {
      res.json({
        success: true,
        hasVoted: false
      });
    }

  } catch (error) {
    console.error('Error checking vote status:', error);
    res.status(500).json({ error: 'Failed to check vote status' });
  }
});

// Get all votes for a game (admin only - with more details)
router.get('/admin/:gameId', async (req, res) =&amp;gt; {
  try {
    const { gameId } = req.params;

    // Check if game exists
    const gameExists = await pool.query('SELECT id FROM games WHERE id = $1', [gameId]);
    if (gameExists.rows.length === 0) {
      return res.status(404).json({ error: 'Game not found' });
    }

    const voteQuery = `
      SELECT
        id,
        user_session,
        voted_statement,
        user_ip,
        voted_at
      FROM votes
      WHERE game_id = $1
      ORDER BY voted_at ASC
    `;

    const result = await pool.query(voteQuery, [gameId]);

    res.json({
      success: true,
      votes: result.rows,
      totalVotes: result.rows.length
    });

  } catch (error) {
    console.error('Error fetching admin votes:', error);
    res.status(500).json({ error: 'Failed to fetch vote details' });
  }
});

  return router;
}&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;server/env.example&lt;/path&gt;
    
  
    &lt;content&gt;# Environment Configuration
NODE_ENV=development

# Server Configuration
PORT=3001
FRONTEND_URL=http://localhost:3000

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=two_truths_db
DB_USER=postgres
DB_PASSWORD=password

# For production, use a strong random secret
SESSION_SECRET=your-super-secret-session-key-change-this-in-production

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;vite.config.js&lt;/path&gt;
    
  
    &lt;content&gt;import { defineConfig } from 'vite';

export default defineConfig({
  root: '.',
  base: './',
  server: {
    host: true,
    port: 3000,
    // Allow tunneling domains like *.ngrok-free.app to prevent 403 (host check)
    allowedHosts: ['localhost', '127.0.0.1', '::1', '.ngrok-free.app']
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    rollupOptions: {
      input: {
        main: './index.html'
      }
    }
  },
  assetsInclude: ['**/*.mp3', '**/*.png', '**/*.svg']
});&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;README.md&lt;/path&gt;
    
  
    &lt;content&gt;Link to the demo video: https://drive.google.com/file/d/1VCYe3CKY03eXvpTVRl5WegnMoka0P6G6/view?usp=sharing

![Two Truths and a Lie Game Demo](Screen%20Recording%202025-08-14%20at%2017.35.12.gif)


# Two Truths and a Lie Game

A modern, full-stack interactive web application for playing &amp;quot;Two Truths and a Lie&amp;quot; with teams. Built with Vite, vanilla JavaScript, Phaser 3 for animations, Express.js backend, PostgreSQL database, and real-time WebSocket communication.

![TestIO Squirrel](assets/images/TestIO_squirel.png)

## Features

### 🎮 **Three-Page Experience**
1. **Admin Setup Page** - Configure games with teammate info and statements
2. **Voting Page** - Let participants guess which statement is the lie
3. **Results Page** - Display real-time voting results with animations

### ✨ **Key Functionality**
- **File Uploads**: Profile pictures (images) and background music (MP3)
- **Timer System**: Optional synchronized voting timers (30s, 1min, 2min, 5min)
- **Real-time Updates**: Live voting results using WebSocket communication
- **Persistent Storage**: PostgreSQL database for game data and votes
- **Animations**: Fireworks for correct votes, thumbs-down rain for incorrect votes
- **Responsive Design**: Modern, mobile-friendly interface
- **Default Music**: Elevator music plays if no custom music is uploaded
- **Multi-user Support**: Multiple participants can join and vote simultaneously

### 🎨 **Modern Design**
- Mentimeter-inspired UI with glassmorphism effects
- Gradient backgrounds and smooth animations
- Interactive vote buttons with hover effects
- Real-time progress bars for voting results
- Live participant count updates

## How to Play

### As an Admin (Game Creator):
1. **Set Up Game**:
   - Enter teammate name
   - Upload a profile picture
   - Write three statements (two truths, one lie)
   - Select which statement is the lie
   - Optionally set a voting timer
   - Optionally upload background music

2. **Start Game**:
   - Click &amp;quot;Start Game&amp;quot;
   - Share the generated link with participants
   - Click &amp;quot;Show the Lie&amp;quot; when ready to reveal the answer

### As a Participant:
1. **Join Game**:
   - Click the shared link
   - View the teammate's profile and statements

2. **Vote**:
   - Select which statement you think is the lie
   - Submit your vote
   - View results with animations

## Installation &amp;amp; Setup

### Prerequisites
- Node.js (version 20.15.1 or higher)
- npm or yarn
- Docker and Docker Compose (recommended for easy setup)
- PostgreSQL (if running without Docker)

### Quick Start with Docker (Recommended)
```bash
# Clone or download the project
cd ulidim

# Start all services (database, backend, frontend)
npm run docker:up

# The application will be available at:
# Frontend: http://localhost:3000
# Backend API: http://localhost:3001
# Database: localhost:5432
```

### Manual Development Setup
```bash
# 1. Start the database
npm run docker:up database

# 2. Install frontend dependencies
npm install

# 3. Install backend dependencies
cd server
npm install
cd ..

# 4. Start backend server
npm run backend:dev

# 5. In a new terminal, start frontend
npm run dev
```

### Available Scripts
- `npm run docker:up` - Start all services with Docker
- `npm run docker:down` - Stop all Docker services
- `npm run docker:logs` - View Docker logs
- `npm run dev` - Start frontend development server
- `npm run backend:dev` - Start backend development server
- `npm run fullstack:dev` - Start database + frontend (hybrid approach)

## Technical Stack

### Frontend
- **Framework**: Vite for build tooling and development server
- **Language**: Vanilla JavaScript (ES6+ modules)
- **UI**: HTML5, CSS3 with glassmorphism effects
- **Animations**: Phaser 3 game engine for particle effects
- **Real-time**: Socket.IO client for WebSocket communication

### Backend
- **Runtime**: Node.js with Express.js framework
- **Database**: PostgreSQL with connection pooling
- **Real-time**: Socket.IO for WebSocket communication
- **Security**: Helmet, CORS, rate limiting
- **Session Management**: User session tracking
- **API**: RESTful endpoints with WebSocket events

### Infrastructure
- **Containerization**: Docker and Docker Compose
- **Database**: PostgreSQL 15 with automatic migrations
- **Caching**: Redis (optional, for production scaling)
- **Development**: Hot reload for both frontend and backend

## Project Structure

```
ulidim/
├── index.html                          # Main HTML entry point
├── style.css                           # Frontend styles
├── vite.config.js                      # Vite configuration
├── package.json                        # Frontend dependencies and scripts
├── docker-compose.yml                  # Multi-service Docker setup
├── Dockerfile.frontend                 # Frontend container config
│
├── src/                                # Frontend source code
│   ├── main.js                        # Main application logic
│   ├── api.js                         # API service and WebSocket client
│   └── phaser-config.js               # Phaser 3 configuration
│
├── server/                             # Backend server
│   ├── server.js                      # Main server entry point
│   ├── package.json                   # Backend dependencies
│   ├── Dockerfile                     # Backend container config
│   ├── env.example                    # Environment variables template
│   ├── healthcheck.js                 # Docker health check
│   │
│   ├── database/                      # Database setup
│   │   ├── connection.js              # PostgreSQL connection
│   │   └── init.sql                   # Database initialization
│   │
│   ├── routes/                        # API routes
│   │   ├── games.js                   # Game management endpoints
│   │   └── votes.js                   # Voting endpoints
│   │
│   └── websocket/                     # Real-time communication
│       └── handlers.js                # WebSocket event handlers
│
└── assets/                             # Static assets
    ├── images/                         # Images and icons
    │   ├── TestIO_squirel.png         # Background images
    │   ├── favicon.svg                # Site icon
    │   └── ...                        # Other images
    └── audio/                          # Audio files
        └── elevator_music.mp3         # Default background music
```

## Game Flow

1. **Admin Setup**: Admin creates game with teammate info and statements
2. **Database Storage**: Game data is stored in PostgreSQL database
3. **Link Generation**: System generates unique shareable link with game ID
4. **WebSocket Connection**: Participants establish real-time connection
5. **Participant Voting**: Participants access voting page via link
6. **Real-time Updates**: Votes are stored in database and broadcast via WebSocket
7. **Live Participant Count**: Real-time tracking of active participants
8. **Timer Synchronization**: Optional countdown timer synchronized across all clients
9. **Lie Revelation**: Admin can reveal the correct answer, triggering animations
10. **Persistent Results**: All game data and votes are persistently stored

## Browser Compatibility

- Modern browsers supporting ES6+ features
- Chrome 70+, Firefox 65+, Safari 12+, Edge 79+
- Mobile browsers supported with responsive design

## API Endpoints

### Game Management
- `POST /api/games` - Create a new game
- `GET /api/games/:id` - Get game details
- `PUT /api/games/:id/reveal-lie` - Reveal the lie (admin only)
- `GET /api/games/:id/stats` - Get game statistics

### Voting
- `POST /api/votes` - Submit a vote
- `GET /api/votes/game/:id` - Get all votes for a game
- `GET /api/votes/check/:gameId/:session` - Check if user has voted

### WebSocket Events
- `joinGame` - Join a game room
- `voteUpdate` - Real-time vote updates
- `lieRevealed` - Lie revelation broadcast
- `participantCountUpdate` - Live participant count
- `timerUpdate` - Timer synchronization

## Development

### Environment Variables
Create a `.env` file in the `server/` directory:
```env
NODE_ENV=development
PORT=3001
FRONTEND_URL=http://localhost:3000
DB_HOST=localhost
DB_PORT=5432
DB_NAME=two_truths_db
DB_USER=postgres
DB_PASSWORD=password
SESSION_SECRET=your-secret-key
```

### Key Features Implemented
- ✅ Full-stack architecture with real-time communication
- ✅ PostgreSQL database with persistent storage
- ✅ File upload handling (images and audio)
- ✅ WebSocket-based real-time voting system
- ✅ Timer synchronization across all clients
- ✅ Phaser 3 particle animations
- ✅ Responsive design with modern UI
- ✅ Game state management with database persistence
- ✅ URL-based game sharing with unique IDs
- ✅ Docker containerization for easy deployment
- ✅ Live participant tracking
- ✅ Rate limiting and security measures

## Production Deployment

### Using Docker Compose
```bash
# Build and start all services
docker-compose up -d

# View logs
docker-compose logs -f

# Stop all services
docker-compose down
```

### Environment Configuration
1. Copy `server/env.example` to `server/.env`
2. Update production values:
   - Set strong `SESSION_SECRET`
   - Configure database credentials
   - Set proper `FRONTEND_URL`

### Database Migration
The database will automatically initialize when the PostgreSQL container starts. For manual migration:
```bash
# Connect to the database container
docker exec -it two_truths_db psql -U postgres -d two_truths_db

# Run custom SQL commands if needed
```

## Customization

### Adding Custom Animations
Modify the Phaser 3 animations in `src/phaser-config.js` and related methods in `src/main.js`.

### API Extensions
Add new endpoints in `server/routes/` and corresponding WebSocket events in `server/websocket/handlers.js`.

### Database Schema
Modify `server/database/init.sql` to add new tables or columns as needed.

### Styling Changes
Update `style.css` to modify the visual appearance. The design uses CSS custom properties for easy theming.

## Architecture Overview

```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│   Frontend      │────▶│    Backend      │────▶│   PostgreSQL    │
│   (Vite +       │     │   (Express +    │     │   Database      │
│   Vanilla JS)   │     │   Socket.IO)    │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
         │                        │                        │
         │ WebSocket              │ WebSocket              │
         │ Communication          │ Events                 │
         │                        │                        │
         ▼                        ▼                        ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│  Real-time UI   │     │  Event Handler  │     │  Data Storage   │
│  Updates        │     │  (Game State)   │     │  (Games/Votes)  │
└─────────────────┘     └─────────────────┘     └─────────────────┘
```

## Demo

The application provides a complete full-stack &amp;quot;Two Truths and a Lie&amp;quot; experience:

### Features in Action:
1. **Admin Experience**: Create games, upload files, manage settings, control reveals
2. **Participant Experience**: Join via unique links, vote in real-time, see live results
3. **Real-time Features**:
   - Live voting updates via WebSocket
   - Synchronized timers across all participants
   - Real-time participant count
   - Instant lie revelation
4. **Visual Feedback**: Phaser 3 animations for correct/incorrect votes
5. **Persistent Data**: All games and votes stored in PostgreSQL
6. **Scalable Architecture**: Ready for production deployment

### Technical Highlights:
- **Real-time Communication**: WebSocket-based updates
- **Database Persistence**: PostgreSQL with proper schema
- **Modern Development**: Vite build system with hot reload
- **Containerized Deployment**: Docker Compose for easy setup
- **Security**: Rate limiting, CORS, and input validation

---

Built with ❤️ for team building and fun interactive experiences!

**TestIO Team** - Transforming team interactions through engaging technology.&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;.dockerignore&lt;/path&gt;
    
  
    &lt;content&gt;# Git and version control
.git
.gitignore
.gitattributes

# Docker files
Dockerfile*
docker-compose*

# Documentation and demo files
README.md
*.md
*.mov
*.gif
*.png
*.jpg

# Node.js
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Memory bank (development only)
memory_bank/

# Build artifacts
dist/
build/&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;.gitignore&lt;/path&gt;
    
  
    &lt;content&gt;memory-bank/
isolation_rules
node_modules/
.tool-versions

# Environment files
.env
.env.local
.env.production
.env.staging

# Database
*.db
*.sqlite

# Logs
logs/
*.log
npm-debug.log*

# Docker
.docker/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Temporary files
tmp/
temp/

# Build outputs
dist/
build/

# Server specific
server/.env
server/node_modules/
server/logs/&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;package.json&lt;/path&gt;
    
  
    &lt;content&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;two-truths-and-a-lie&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Interactive Two Truths and a Lie game application&amp;quot;,
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;git+https://github.com/testio/two-truths-and-a-lie.git&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;TestIO Team&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;dev&amp;quot;: &amp;quot;vite&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;vite build&amp;quot;,
    &amp;quot;preview&amp;quot;: &amp;quot;vite preview&amp;quot;,
    &amp;quot;start&amp;quot;: &amp;quot;vite&amp;quot;,
    &amp;quot;legacy&amp;quot;: &amp;quot;alive-server&amp;quot;,
    &amp;quot;docker:build&amp;quot;: &amp;quot;docker-compose build&amp;quot;,
    &amp;quot;docker:up&amp;quot;: &amp;quot;docker-compose up -d&amp;quot;,
    &amp;quot;docker:down&amp;quot;: &amp;quot;docker-compose down&amp;quot;,
    &amp;quot;docker:logs&amp;quot;: &amp;quot;docker-compose logs -f&amp;quot;,
    &amp;quot;fullstack:dev&amp;quot;: &amp;quot;docker-compose up -d database &amp;amp;&amp;amp; npm run dev&amp;quot;,
    &amp;quot;backend:dev&amp;quot;: &amp;quot;cd server &amp;amp;&amp;amp; npm run dev&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;No tests specified yet\&amp;quot;&amp;quot;,
    &amp;quot;lint&amp;quot;: &amp;quot;echo \&amp;quot;No linting configured yet\&amp;quot;&amp;quot;
  },
  &amp;quot;keywords&amp;quot;: [
    &amp;quot;game&amp;quot;,
    &amp;quot;interactive&amp;quot;,
    &amp;quot;team-building&amp;quot;,
    &amp;quot;phaser&amp;quot;
  ],
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;alive-server&amp;quot;: &amp;quot;^1.3.0&amp;quot;,
    &amp;quot;vite&amp;quot;: &amp;quot;^7.1.2&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;phaser&amp;quot;: &amp;quot;^3.88.2&amp;quot;,
    &amp;quot;socket.io&amp;quot;: &amp;quot;^4.7.4&amp;quot;,
    &amp;quot;socket.io-client&amp;quot;: &amp;quot;^4.7.4&amp;quot;
  }
}&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;style.css&lt;/path&gt;
    
  
    &lt;content&gt;/* Two Truths and a Lie Game - Pointillism Pop-Art Design */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Comic Sans MS', 'Marker Felt', cursive, -apple-system, BlinkMacSystemFont, sans-serif;
    background:
        radial-gradient(circle at 20% 80%, #ff6b9d 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, #4ecdc4 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, #45b7d1 0%, transparent 50%),
        radial-gradient(circle at 60% 80%, #96ceb4 0%, transparent 50%),
        radial-gradient(circle at 80% 60%, #feca57 0%, transparent 50%),
        #ff9ff3;
    min-height: 100vh;
    overflow-x: hidden;
    position: relative;
}

/* Dotted overlay animation */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image:
        radial-gradient(circle at 10px 10px, rgba(255,255,255,0.3) 1px, transparent 1px),
        radial-gradient(circle at 30px 30px, rgba(0,0,0,0.1) 1px, transparent 1px);
    background-size: 20px 20px, 40px 40px;
    animation: dotMove 8s linear infinite;
    z-index: -1;
    pointer-events: none;
}

@keyframes dotMove {
    0% { transform: translate(0, 0); }
    25% { transform: translate(10px, 5px); }
    50% { transform: translate(5px, 10px); }
    75% { transform: translate(-5px, 5px); }
    100% { transform: translate(0, 0); }
}

.background-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
    opacity: 0.3;
    pointer-events: none;
}

.background-squirrel {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: contrast(1.5) saturate(1.8) hue-rotate(15deg);
    mix-blend-mode: multiply;
}

.main-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

/* Page Management */
.page {
    display: none;
    width: 100%;
    max-width: 600px;
    animation: fadeIn 0.5s ease-in-out;
}

.page.active {
    display: block;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px) scale(0.95); }
    to { opacity: 1; transform: translateY(0) scale(1); }
}

@keyframes popArt {
    0%, 100% { transform: scale(1) rotate(0deg); }
    25% { transform: scale(1.05) rotate(1deg); }
    50% { transform: scale(0.98) rotate(-0.5deg); }
    75% { transform: scale(1.02) rotate(0.5deg); }
}

.page-content {
    background:
        radial-gradient(circle at 15% 15%, rgba(255, 107, 157, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 85% 85%, rgba(78, 205, 196, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 50% 50%, rgba(254, 202, 87, 0.15) 0%, transparent 70%),
        rgba(255, 255, 255, 0.92);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    padding: 40px;
    box-shadow:
        0 0 0 3px rgba(255, 107, 157, 0.3),
        0 0 0 6px rgba(78, 205, 196, 0.2),
        0 0 0 9px rgba(254, 202, 87, 0.1),
        0 15px 35px rgba(0, 0, 0, 0.15);
    border: 3px dotted rgba(255, 107, 157, 0.6);
    position: relative;
    animation: popArt 6s ease-in-out infinite;
}

.page-content::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #ff6b9d, #4ecdc4, #feca57, #45b7d1);
    border-radius: 22px;
    z-index: -1;
    animation: borderShift 4s linear infinite;
}

@keyframes borderShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Typography */
.page-title {
    font-size: 2.8rem;
    font-weight: 900;
    background: linear-gradient(45deg, #ff6b9d, #4ecdc4, #feca57, #45b7d1);
    background-size: 300% 300%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 8px;
    text-align: center;
    text-shadow: 2px 2px 0px rgba(0,0,0,0.1);
    animation: textShimmer 3s ease-in-out infinite;
    letter-spacing: 2px;
    text-transform: uppercase;
}

@keyframes textShimmer {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

.page-subtitle {
    font-size: 1.2rem;
    color: #2c3e50;
    text-align: center;
    margin-bottom: 32px;
    font-weight: 600;
    text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
}

h3 {
    font-size: 1.6rem;
    font-weight: 700;
    background: linear-gradient(135deg, #ff6b9d, #4ecdc4);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 16px;
    position: relative;
}

h3::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    right: 0;
    height: 3px;
    background: repeating-linear-gradient(
        90deg,
        #ff6b9d,
        #ff6b9d 10px,
        transparent 10px,
        transparent 15px
    );
}

/* Form Styles */
.form {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

label {
    font-weight: 500;
    color: #333;
    font-size: 0.95rem;
}

input[type=&amp;quot;text&amp;quot;],
input[type=&amp;quot;file&amp;quot;],
textarea,
select {
    padding: 16px 20px;
    border: 3px dotted #ff6b9d;
    border-radius: 15px;
    font-size: 1.1rem;
    font-family: inherit;
    font-weight: 600;
    transition: all 0.3s ease;
    background:
        radial-gradient(circle at 15% 15%, rgba(255, 107, 157, 0.05) 0%, transparent 50%),
        radial-gradient(circle at 85% 85%, rgba(78, 205, 196, 0.05) 0%, transparent 50%),
        rgba(255, 255, 255, 0.95);
    position: relative;
}

input[type=&amp;quot;text&amp;quot;]:focus,
textarea:focus,
select:focus {
    outline: none;
    border-color: #4ecdc4;
    box-shadow:
        0 0 0 4px rgba(78, 205, 196, 0.3),
        0 8px 25px rgba(78, 205, 196, 0.2);
    transform: scale(1.02);
    background:
        radial-gradient(circle at 15% 15%, rgba(78, 205, 196, 0.08) 0%, transparent 50%),
        radial-gradient(circle at 85% 85%, rgba(255, 107, 157, 0.08) 0%, transparent 50%),
        rgba(255, 255, 255, 0.98);
}

textarea {
    resize: vertical;
    min-height: 80px;
}

.hint {
    font-size: 0.9rem;
    color: #666;
    font-style: italic;
    margin-bottom: 16px;
}

.file-hint {
    font-size: 0.85rem;
    color: #888;
    margin-top: 4px;
}

/* Upload Preview */
.upload-preview {
    margin-top: 12px;
    border-radius: 12px;
    overflow: hidden;
    max-width: 200px;
}

.upload-preview img {
    width: 100%;
    height: auto;
    border-radius: 12px;
}

/* Sections */
.statements-section,
.optional-section {
    border-top: 1px solid #e1e5e9;
    padding-top: 24px;
}

/* Buttons */
.btn {
    padding: 16px 32px;
    border: 4px dotted;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: 800;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    min-height: 60px;
    text-transform: uppercase;
    letter-spacing: 1px;
    position: relative;
    overflow: hidden;
}

.btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 20% 20%, rgba(255,255,255,0.3) 2px, transparent 2px),
        radial-gradient(circle at 60% 60%, rgba(255,255,255,0.2) 1px, transparent 1px);
    background-size: 15px 15px, 25px 25px;
    animation: dotPulse 2s ease-in-out infinite;
    pointer-events: none;
}

@keyframes dotPulse {
    0%, 100% { opacity: 0.3; transform: scale(1); }
    50% { opacity: 0.8; transform: scale(1.05); }
}

.btn-primary {
    background: linear-gradient(135deg, #ff6b9d, #4ecdc4, #feca57);
    background-size: 200% 200%;
    color: white;
    border-color: #ff6b9d;
    box-shadow:
        0 0 0 3px rgba(255, 107, 157, 0.3),
        0 8px 25px rgba(255, 107, 157, 0.4);
    animation: gradientShift 3s ease-in-out infinite;
}

@keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

.btn-primary:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow:
        0 0 0 5px rgba(255, 107, 157, 0.4),
        0 15px 40px rgba(255, 107, 157, 0.6);
    animation-duration: 1.5s;
}

.btn-primary:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    animation: none;
}

.btn-secondary {
    background: linear-gradient(135deg, #ecf0f1, #bdc3c7);
    color: #2c3e50;
    border-color: #4ecdc4;
    box-shadow: 0 0 0 2px rgba(78, 205, 196, 0.3);
}

.btn-secondary:hover {
    background: linear-gradient(135deg, #d5dbdb, #95a5a6);
    transform: translateY(-3px);
    box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.5);
}

.btn-danger {
    background: linear-gradient(135deg, #e74c3c, #c0392b);
    background-size: 200% 200%;
    color: white;
    border-color: #e74c3c;
    box-shadow:
        0 0 0 3px rgba(231, 76, 60, 0.3),
        0 8px 25px rgba(231, 76, 60, 0.4);
    animation: dangerPulse 2s ease-in-out infinite;
}

@keyframes dangerPulse {
    0%, 100% { background-position: 0% 50%; transform: scale(1); }
    50% { background-position: 100% 50%; transform: scale(1.02); }
}

.btn-danger:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow:
        0 0 0 5px rgba(231, 76, 60, 0.5),
        0 15px 40px rgba(231, 76, 60, 0.6);
}

.button-group {
    display: flex;
    gap: 16px;
    justify-content: center;
    margin-top: 32px;
}

/* Game Controls */
.game-controls {
    margin-top: 32px;
    padding: 24px;
    background: rgba(102, 126, 234, 0.1);
    border-radius: 16px;
    border: 1px solid rgba(102, 126, 234, 0.2);
}

.share-link h3 {
    color: #667eea;
    margin-bottom: 8px;
}

.link-container {
    display: flex;
    gap: 12px;
    margin: 16px 0 24px 0;
}

.link-container input {
    flex: 1;
    background: #f8f9fa;
    border: 1px solid #e1e5e9;
}

/* Voting Page Styles */
.participant-info {
    text-align: center;
    margin-bottom: 32px;
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.page-header h2,
.page-header h3 {
    margin: 0;
    flex: 1;
}

.music-toggle-btn {
    padding: 8px 16px;
    font-size: 0.9rem;
    min-width: 120px;
}

.participant-picture {
    width: 140px;
    height: 140px;
    border-radius: 50%;
    overflow: hidden;
    margin: 0 auto 16px;
    border: 6px dotted #ff6b9d;
    box-shadow:
        0 0 0 4px rgba(255, 107, 157, 0.3),
        0 0 0 8px rgba(78, 205, 196, 0.2),
        0 15px 35px rgba(255, 107, 157, 0.4);
    position: relative;
    animation: pictureBounce 4s ease-in-out infinite;
}

@keyframes pictureBounce {
    0%, 100% { transform: scale(1) rotate(0deg); }
    25% { transform: scale(1.05) rotate(2deg); }
    50% { transform: scale(0.98) rotate(-1deg); }
    75% { transform: scale(1.02) rotate(1deg); }
}

.participant-picture::before {
    content: '';
    position: absolute;
    top: -6px;
    left: -6px;
    right: -6px;
    bottom: -6px;
    border-radius: 50%;
    background:
        radial-gradient(circle at 30% 30%, rgba(254, 202, 87, 0.6) 2px, transparent 2px),
        radial-gradient(circle at 70% 70%, rgba(69, 183, 209, 0.4) 1px, transparent 1px);
    background-size: 20px 20px, 15px 15px;
    animation: dotRotate 8s linear infinite;
    z-index: -1;
}

@keyframes dotRotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.participant-picture img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: contrast(1.2) saturate(1.3);
}

#participant-name {
    font-size: 1.8rem;
    font-weight: 600;
    color: #1a1a1a;
}

.voting-section {
    text-align: center;
}

.timer {
    font-size: 2.5rem;
    font-weight: 900;
    background: linear-gradient(45deg, #e74c3c, #f39c12, #e74c3c);
    background-size: 200% 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 16px 0 32px;
    padding: 20px;
    background-color:
        radial-gradient(circle at 20% 20%, rgba(231, 76, 60, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(243, 156, 18, 0.15) 0%, transparent 50%),
        rgba(255, 255, 255, 0.9);
    border-radius: 20px;
    border: 4px dotted #e74c3c;
    position: relative;
    animation: timerPulse 1s ease-in-out infinite;
    text-align: center;
    box-shadow:
        0 0 0 3px rgba(231, 76, 60, 0.3),
        0 10px 30px rgba(231, 76, 60, 0.4);
}

.timer::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 25% 25%, rgba(243, 156, 18, 0.4) 2px, transparent 2px),
        radial-gradient(circle at 75% 75%, rgba(231, 76, 60, 0.3) 1px, transparent 1px);
    background-size: 20px 20px, 30px 30px;
    border-radius: 16px;
    animation: timerDots 3s linear infinite;
    pointer-events: none;
}

@keyframes timerPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

@keyframes timerDots {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.statements {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin: 32px 0;
}

.statement-option {
    display: flex;
    align-items: center;
    gap: 20px;
    padding: 25px;
    background:
        radial-gradient(circle at 10% 10%, rgba(255, 107, 157, 0.08) 0%, transparent 50%),
        radial-gradient(circle at 90% 90%, rgba(78, 205, 196, 0.08) 0%, transparent 50%),
        rgba(255, 255, 255, 0.95);
    border: 3px dotted #ff6b9d;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: left;
    font-size: 1.1rem;
    font-weight: 600;
    position: relative;
    overflow: hidden;
}

.statement-option::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 25% 25%, rgba(254, 202, 87, 0.3) 1px, transparent 1px),
        radial-gradient(circle at 75% 75%, rgba(69, 183, 209, 0.2) 1px, transparent 1px);
    background-size: 20px 20px, 30px 30px;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
}

.statement-option:hover {
    border-color: #4ecdc4;
    background:
        radial-gradient(circle at 10% 10%, rgba(255, 107, 157, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 90% 90%, rgba(78, 205, 196, 0.15) 0%, transparent 50%),
        rgba(255, 255, 255, 0.98);
    transform: translateY(-5px) scale(1.02);
    box-shadow:
        0 0 0 3px rgba(78, 205, 196, 0.4),
        0 8px 25px rgba(78, 205, 196, 0.3);
    animation: statementHover 0.6s ease-in-out;
}

.statement-option:hover::before {
    opacity: 1;
}

@keyframes statementHover {
    0%, 100% { transform: translateY(-5px) scale(1.02); }
    50% { transform: translateY(-7px) scale(1.03); }
}

.statement-option.selected {
    border-color: #feca57;
    background:
        radial-gradient(circle at 10% 10%, rgba(254, 202, 87, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 90% 90%, rgba(255, 107, 157, 0.15) 0%, transparent 50%),
        rgba(255, 255, 255, 0.95);
    box-shadow:
        0 0 0 4px rgba(254, 202, 87, 0.5),
        0 10px 30px rgba(254, 202, 87, 0.4);
    animation: selectedPulse 2s ease-in-out infinite;
}

@keyframes selectedPulse {
    0%, 100% { box-shadow: 0 0 0 4px rgba(254, 202, 87, 0.5), 0 10px 30px rgba(254, 202, 87, 0.4); }
    50% { box-shadow: 0 0 0 6px rgba(254, 202, 87, 0.7), 0 15px 40px rgba(254, 202, 87, 0.6); }
}

.statement-number {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    background: linear-gradient(135deg, #ff6b9d, #4ecdc4);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 800;
    flex-shrink: 0;
    font-size: 1.2rem;
    box-shadow: 0 4px 15px rgba(255, 107, 157, 0.4);
    position: relative;
}

.statement-number::before {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    right: 2px;
    bottom: 2px;
    border-radius: 50%;
    background:
        radial-gradient(circle at 30% 30%, rgba(255,255,255,0.4) 2px, transparent 2px);
    background-size: 8px 8px;
}

.statement-text {
    flex: 1;
    font-weight: 600;
    color: #2c3e50;
    text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
}

/* Results Page Styles */
.results-section {
    margin-top: 24px;
}

.chart-container {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin: 24px 0;
}

.result-bar {
    display: flex;
    align-items: center;
    gap: 16px;
}

.result-label {
    min-width: 100px;
    font-weight: 500;
    color: #333;
    text-align: right;
}

.bar {
    flex: 1;
    height: 40px;
    background: #f1f3f5;
    border-radius: 20px;
    overflow: hidden;
    position: relative;
}

.bar-fill {
    height: 100%;
    background: linear-gradient(135deg, #ff6b9d 0%, #4ecdc4 50%, #feca57 100%);
    background-size: 200% 200%;
    border-radius: 20px;
    transition: width 0.8s ease;
    width: 0%;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding-right: 12px;
    color: white;
    font-weight: 800;
    font-size: 1rem;
    position: relative;
    animation: barShimmer 3s ease-in-out infinite;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
}

.bar-fill::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 20% 50%, rgba(255,255,255,0.4) 1px, transparent 1px),
        radial-gradient(circle at 60% 50%, rgba(255,255,255,0.3) 1px, transparent 1px);
    background-size: 15px 8px, 25px 12px;
    border-radius: 20px;
    animation: dotSlide 4s linear infinite;
}

@keyframes barShimmer {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

@keyframes dotSlide {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

.bar-fill.correct {
    background: linear-gradient(135deg, #2ecc71 0%, #27ae60 50%, #16a085 100%);
    background-size: 200% 200%;
    animation: correctShimmer 2s ease-in-out infinite;
}

@keyframes correctShimmer {
    0%, 100% { background-position: 0% 50%; box-shadow: 0 0 20px rgba(46, 204, 113, 0.6); }
    50% { background-position: 100% 50%; box-shadow: 0 0 30px rgba(46, 204, 113, 0.8); }
}

.bar-fill.incorrect {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 50%, #8e44ad 100%);
    background-size: 200% 200%;
    animation: incorrectShimmer 2s ease-in-out infinite;
}

@keyframes incorrectShimmer {
    0%, 100% { background-position: 0% 50%; box-shadow: 0 0 20px rgba(231, 76, 60, 0.6); }
    50% { background-position: 100% 50%; box-shadow: 0 0 30px rgba(231, 76, 60, 0.8); }
}

.result-percentage {
    min-width: 50px;
    font-weight: 600;
    color: #333;
    text-align: center;
}

.lie-reveal {
    margin-top: 32px;
    padding: 24px;
    background: rgba(255, 107, 107, 0.1);
    border-radius: 16px;
    border: 2px solid rgba(255, 107, 107, 0.2);
    text-align: center;
}

.lie-reveal h3 {
    color: #ee5a52;
    margin-bottom: 16px;
}

.lie-statement {
    font-size: 1.1rem;
    font-weight: 500;
    color: #333;
    padding: 16px;
    background: white;
    border-radius: 12px;
    border: 2px solid rgba(255, 107, 107, 0.3);
}

/* Feedback Animation Container */
.feedback-animation {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 999;
}

/* Responsive Design */
@media (max-width: 768px) {
    .page-content {
        padding: 24px;
        margin: 10px;
    }

    .page-title {
        font-size: 2rem;
    }

    .participant-picture {
        width: 100px;
        height: 100px;
    }

    .link-container {
        flex-direction: column;
    }

    .result-bar {
        flex-direction: column;
        align-items: stretch;
        gap: 8px;
    }

    .result-label {
        text-align: left;
        min-width: auto;
    }

    .page-header {
        flex-direction: column;
        align-items: stretch;
        gap: 12px;
    }

    .page-header h2,
    .page-header h3 {
        text-align: center;
    }

    .music-toggle-btn {
        align-self: center;
        min-width: 140px;
    }
}

/* Loading states */
.loading {
    opacity: 0.6;
    pointer-events: none;
}

.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #667eea;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;Dockerfile.frontend&lt;/path&gt;
    
  
    &lt;content&gt;# Multi-stage build for optimized frontend
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install dependencies
RUN npm ci &amp;amp;&amp;amp; npm cache clean --force

# Copy source code (excluding server)
COPY . .
RUN rm -rf server/

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs &amp;amp;&amp;amp; \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy dependencies and application from builder
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app .

# Create required directories with proper permissions
RUN mkdir -p /app/dist /app/logs &amp;amp;&amp;amp; \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Set environment
ENV NODE_ENV=development
ENV VITE_HOST=0.0.0.0

# Health check using node instead of wget
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD node -e &amp;quot;const http = require('http'); const req = http.request({host: 'localhost', port: 3000, path: '/', timeout: 5000}, (res) =&amp;gt; process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () =&amp;gt; process.exit(1)); req.end();&amp;quot;

# Use dumb-init for proper signal handling
ENTRYPOINT [&amp;quot;dumb-init&amp;quot;, &amp;quot;--&amp;quot;]

# Start Vite development server
CMD [&amp;quot;npm&amp;quot;, &amp;quot;run&amp;quot;, &amp;quot;dev&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--host&amp;quot;, &amp;quot;0.0.0.0&amp;quot;, &amp;quot;--port&amp;quot;, &amp;quot;3000&amp;quot;]&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;memory_bank/techContext.md&lt;/path&gt;
    
  
    &lt;content&gt;# Tech Context

- Languages: JavaScript (frontend/backend), SQL (Postgres).
- Libraries: Express, Socket.IO, pg, dotenv, cors, Phaser, Vite.
- Env Vars: VITE_API_URL (must include /api), VITE_WS_URL, DB credentials.
- Ports: Frontend 3000, Backend 3001 (/api, WS), Postgres 5432.
- Health: /api/health endpoint; backend container healthcheck present.&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;memory_bank/activeContext.md&lt;/path&gt;
    
  
    &lt;content&gt;# Active Context

- Mode: PLAN MODE (Level 3 - Authentication + Timer Features)
- Current Focus: Creating comprehensive plan for basic authentication system and enhanced timer interruption functionality
- Status: ✅ PLANNING COMPLETE - Authentication + timer enhancement plan documented with detailed implementation strategy
- Next: IMPLEMENT MODE - Execute authentication system, timer interruption confirmation, and comprehensive testing&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;memory_bank/progress.md&lt;/path&gt;
    
  
    &lt;content&gt;# Progress Log

- Backend/WS: Implemented API + Socket.IO, DB schema, routes.
- Docker: Compose setup; fixed backend build (npm install), env URL fix (/api).
- Realtime: Vote updates + lie reveal broadcasting.
- Bugfix: Frontend API base normalization; WebSocket io injection refactor (route factories).
- UI: Music controls, page data propagation, animations after reveal.
- VAN: Applied pointillism/pop-art theme; TestIO squirrel background; dotted animations.
- VAN Assessment: Level 1 complete - visual implementation verified excellent, brand integration stable.
- PLAN: Level 3 complete - critical bugs identified (&amp;quot;Show the Lie&amp;quot; errors, timer/music upload), fireworks enhancement planned, Redis removal + Docker optimization mapped.
- IMPLEMENT: Level 3 complete - ✅ Critical bugs fixed with enhanced error handling, ✅ Fireworks animation added (geometric pointillism), ✅ Infrastructure optimized (Redis removed, Docker multi-stage builds, security improvements), ✅ VAN design preserved.
- Ready: REFLECT MODE to validate implementation and assess system stability.&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;memory_bank/productContext.md&lt;/path&gt;
    
  
    &lt;content&gt;# Product Context

- Stakeholders: Admin host, Participants, Dev/QA.
- Primary Flows:
  - Admin sets up game (name, picture, statements, lie index, timer).
  - Participants join via link and vote.
  - Admin reveals lie or timer expires; results update live.
- Success Criteria: Smooth real-time UX, accurate results, simple sharing, delightful visuals.&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;memory_bank/projectbrief.md&lt;/path&gt;
    
  
    &lt;content&gt;# Two Truths and a Lie - TestIO Edition

- Purpose: Interactive team game with real-time voting, lie reveal, and celebratory feedback.
- Audience: Team members joining via share link; admin controls the game.
- Constraints: Keep existing functionality stable; support Docker Compose; real-time via WebSockets; DB-backed.
- Branding: Use TestIO squirrel background and playful, pop-art inspired UI.&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;memory_bank/tasks.md&lt;/path&gt;
    
  
    &lt;content&gt;# tasks.md (Source of Truth)

## Completed
- Integrate Phaser and organize assets
- Data visibility across pages (name, picture, options)
- Highlight lie on results + animations after reveal
- Music only on voting/results + toggle
- Real-time updates (votes, lie reveal override)
- Backend + DB + WebSockets + Docker Compose
- Fix API base URL (/api), CORS, and build issues
- Refactor route IO injection to factories
- VAN: Apply TestIO squirrel background and pointillism/pop-art styling
- VAN Assessment: Level 1 complete - visual implementation verified excellent
- IMPLEMENT Level 3: Critical bug fixes + infrastructure cleanup completed
  - ✅ Enhanced &amp;quot;Show the Lie&amp;quot; error handling with comprehensive logging and WebSocket state validation
  - ✅ Fixed timer/music upload validation issues preventing game start with better file handling
  - ✅ Added fireworks animation for admin lie reveal using geometric pointillism style with pop-art colors
  - ✅ Removed unused Redis service from docker-compose (infrastructure cleanup)
  - ✅ Optimized Dockerfiles with multi-stage builds, non-root users, and security improvements
  - ✅ Added .dockerignore files for build performance optimization
  - ✅ All changes preserve VAN design and maintain existing functionality
- ✅ DEBUG: Console Request Failures - All console errors eliminated
  - ✅ Fixed Docker service startup and health check issues
  - ✅ Eliminated duplicate API/WebSocket calls for reveal-lie action
  - ✅ Implemented proper admin verification with creator_session database field
  - ✅ Added secure authorization for sensitive actions (reveal-lie)
  - ✅ Database migration successfully applied - creator_session field added
  - ✅ System fully operational with clean console output

## In Progress
- PLAN Level 3: Authentication + Enhanced Timer Features

## Backlog
- Accessibility polish (contrast, focus states)
- Browser testing matrix

---

## PLAN: Authentication + Enhanced Timer Features (Level 3)

### Overview
Add basic authentication to protect admin access and enhance timer functionality with interruption confirmation. This plan includes security improvements, UX enhancements, and comprehensive testing.

### Requirements Analysis

#### 1. Basic Authentication System (CRITICAL)
**Business Need:** Secure admin access to prevent unauthorized game creation
**Technical Requirements:**
- Environment-configurable login credentials (.env)
- Authentication flow before admin page access
- Session management for authenticated users
- Secure credential validation

**Current State:** No authentication - direct access to admin page
**Target State:** Login-protected admin access with configurable credentials

#### 2. Enhanced Timer Features (HIGH PRIORITY)
**Business Need:** Better timer control and user experience
**Technical Requirements:**
- Timer interruption confirmation modal
- Full-screen modal with &amp;quot;Yes&amp;quot;/&amp;quot;No&amp;quot; options
- Timer state preservation during confirmation
- Graceful timer cancellation

**Current State:** Timer works but no interruption confirmation
**Target State:** Professional timer management with confirmation dialogs

#### 3. Comprehensive Bug Testing (MEDIUM PRIORITY)
**Business Need:** Ensure system reliability before production
**Technical Requirements:**
- Full functionality testing across all flows
- Edge case validation
- Performance verification
- Bug identification and resolution

### Components Affected

#### Frontend Components
- **New:** Login page (`index.html`, `src/main.js`)
- **Modified:** Admin page access control
- **Modified:** Timer interruption handling (`src/main.js`)
- **New:** Confirmation modal system

#### Backend Components
- **New:** Authentication middleware (`server/middleware/auth.js`)
- **Modified:** Environment configuration (`server/env.example`)
- **Modified:** Admin route protection (`server/routes/games.js`)

#### Infrastructure Components
- **Modified:** Environment variables (`.env`, `docker-compose.yml`)
- **Enhanced:** Security headers and session management

### Architecture Considerations

#### Authentication Flow
```
User Access → Login Page → Credential Validation → Admin Dashboard
     ↓              ↓                ↓                    ↓
   No Auth    Check .env      Set Session         Full Access
```

#### Timer Interruption Flow
```
Timer Running → &amp;quot;Show Lie&amp;quot; Click → Confirmation Modal → User Choice
      ↓                ↓                    ↓              ↓
 Show Disabled   Pause Timer         Full Screen    Yes/No Options
```

#### Security Model
- Basic HTTP Authentication (configurable)
- Session-based access control
- Environment-driven credential management
- Secure session storage

### Implementation Strategy

#### Phase 1: Authentication System (Priority 1)
1. **Environment Configuration**
   - Add `ADMIN_USERNAME` and `ADMIN_PASSWORD` to `.env`
   - Update `docker-compose.yml` environment variables
   - Create secure default values in `env.example`

2. **Login Page Implementation**
   - Create login form in `index.html`
   - Add authentication logic to `src/main.js`
   - Implement session management with `sessionStorage`

3. **Backend Authentication**
   - Create authentication middleware
   - Protect admin routes
   - Add session validation endpoints

4. **Access Control Integration**
   - Modify page routing to check authentication
   - Add logout functionality
   - Handle authentication errors gracefully

#### Phase 2: Enhanced Timer Features (Priority 2)
1. **Confirmation Modal System**
   - Create full-screen modal component
   - Add to existing modal system in `style.css`
   - Implement modal state management

2. **Timer Interruption Logic**
   - Modify `revealLie()` to check timer state
   - Add confirmation prompt before timer cancellation
   - Preserve timer state during confirmation

3. **UX Improvements**
   - Visual indicators for timer running state
   - Button state management (disabled/enabled)
   - Smooth transitions and animations

#### Phase 3: Comprehensive Testing (Priority 3)
1. **Authentication Testing**
   - Valid/invalid credential scenarios
   - Session persistence testing
   - Security boundary testing

2. **Timer Functionality Testing**
   - Timer start/stop scenarios
   - Interruption confirmation testing
   - Edge cases (timer expiry during confirmation)

3. **Integration Testing**
   - Full game flow with authentication
   - Multi-user scenarios with timer
   - Real-time functionality verification

### Detailed Implementation Steps

#### Authentication Implementation
1. **Environment Setup**
   ```bash
   # Add to .env
   ADMIN_USERNAME=admin
   ADMIN_PASSWORD=secure_password_123
   ```

2. **Login Page Creation**
   - Add login form before admin page
   - Style with existing VAN design system
   - Implement client-side validation

3. **Backend Protection**
   - Create `authenticateAdmin` middleware
   - Add `/auth/login` and `/auth/logout` endpoints
   - Integrate with existing route structure

4. **Session Management**
   - Use secure session storage
   - Implement session timeout
   - Add logout functionality

#### Timer Enhancement Implementation
1. **Modal System Extension**
   - Add confirmation modal to `index.html`
   - Style with full-screen overlay
   - Implement modal show/hide logic

2. **Timer Interruption Logic**
   ```javascript
   // In revealLie() function
   if (this.timerInterval &amp;amp;&amp;amp; this.timeRemaining &amp;gt; 0) {
     this.showTimerInterruptionConfirmation();
     return;
   }
   ```

3. **Confirmation Handling**
   - Pause timer during confirmation
   - Resume or cancel based on user choice
   - Update UI states accordingly

### Dependencies &amp;amp; Integration Points

#### External Dependencies
- **Session Management:** Use existing browser `sessionStorage`
- **Environment Variables:** Leverage existing `.env` system
- **Styling:** Extend current VAN design system

#### Internal Integration Points
- **WebSocket System:** Ensure timer interruption broadcasts correctly
- **Database:** No schema changes required
- **Phaser Animations:** Maintain existing animation system

### Challenges &amp;amp; Mitigations

#### Challenge 1: Authentication Security
**Risk:** Basic auth in frontend could be vulnerable
**Mitigation:**
- Use server-side session validation
- Implement secure session timeouts
- Add rate limiting for login attempts

#### Challenge 2: Timer State Synchronization
**Risk:** Timer state conflicts during interruption
**Mitigation:**
- Implement proper state locking
- Add WebSocket state synchronization
- Handle edge cases gracefully

#### Challenge 3: Modal UX Complexity
**Risk:** Modal interrupting game flow
**Mitigation:**
- Use intuitive, accessible modal design
- Preserve game state during modal display
- Add clear visual indicators

### Creative Phase Components

#### UI/UX Design Requirements
- **Login Page Design:** Simple, secure form matching VAN aesthetics
- **Confirmation Modal:** Full-screen, clear action buttons
- **Timer State Indicators:** Visual feedback for running/paused states

#### User Flow Design
- **Authentication Flow:** Streamlined login → admin access
- **Timer Interruption Flow:** Clear confirmation → decisive action
- **Error Handling:** Graceful error states and recovery

### Verification &amp;amp; Testing Strategy

#### Authentication Verification
- [ ] Valid credentials grant access
- [ ] Invalid credentials are rejected
- [ ] Session persistence works correctly
- [ ] Logout functionality works
- [ ] Protected routes are secured

#### Timer Feature Verification
- [ ] Timer interruption shows confirmation modal
- [ ] &amp;quot;Yes&amp;quot; cancels timer and reveals lie
- [ ] &amp;quot;No&amp;quot; resumes timer without interruption
- [ ] Modal displays correctly on all screen sizes
- [ ] WebSocket synchronization maintains state

#### Integration Verification
- [ ] Full game flow with authentication works
- [ ] Timer features work with WebSocket system
- [ ] VAN design consistency maintained
- [ ] Performance remains optimal

### Success Criteria
- ✅ Authentication protects admin access with .env credentials
- ✅ Timer interruption requires user confirmation
- ✅ All existing functionality preserved
- ✅ VAN design system maintained
- ✅ No new console errors introduced
- ✅ Professional UX for timer management

### Mode Recommendation
- **Next Mode:** IMPLEMENT MODE (execute authentication + timer features)
- **Complexity:** Level 3 (security + UX enhancement + testing)
- **Creative Phases Required:** UI/UX design for login and modal systems&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;memory_bank/systemPatterns.md&lt;/path&gt;
    
  
    &lt;content&gt;# System Patterns

- Frontend: Vite, ES modules, Socket.IO client, Phaser for animations.
- Backend: Node/Express, Socket.IO server, REST API, CORS, rate limiting.
- Storage: PostgreSQL (games, votes), Redis available for sessions.
- Realtime: Room-per-game with broadcast events (voteUpdate, lieRevealed, timerUpdate).
- Containerization: docker-compose orchestrating frontend, backend, db, redis.&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;src/phaser-config.js&lt;/path&gt;
    
  
    &lt;content&gt;// Phaser Configuration for Two Truths and a Lie Game
export const phaserConfig = {
    type: Phaser.AUTO,
    width: window.innerWidth,
    height: window.innerHeight,
    parent: 'phaser-container',
    transparent: true,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 300 },
            debug: false
        }
    },
    scale: {
        mode: Phaser.Scale.RESIZE,
        autoCenter: Phaser.Scale.CENTER_BOTH
    }
};

// Assets configuration
export const gameAssets = {
    images: {
        star: 'assets/images/star.svg',
        confetti: 'assets/images/confetti.svg',
        squirrel: 'assets/images/TestIO_squirel.png'
    },
    audio: {
        backgroundMusic: 'assets/audio/elevator_music.mp3'
    }
};

// Animation configuration
export const animationSettings = {
    fireworks: {
        colors: [0xFFD700, 0xFF6B6B, 0x51CF66, 0x667EEA, 0xFF8C42],
        textures: ['star', 'confetti'],
        particleCount: 8,
        particleSpeed: { min: 100, max: 300 },
        particleLifespan: 1500,
        gravityY: 50
    },
    thumbsDown: {
        particleCount: 10,
        particleSpeed: { min: 100, max: 200 },
        particleLifespan: 3000,
        tint: 0xFF6B6B
    }
};&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;src/main.js&lt;/path&gt;
    
  
    &lt;content&gt;// Two Truths and a Lie Game - Main Application
import { apiService } from './api.js';
import { musicService } from './services/music.js';

class TwoTruthsGame {
    constructor() {
        this.gameData = {
            id: null,
            admin: false,
            teammate: {
                name: '',
                picture: null,
                pictureUrl: ''
            },
            statements: ['', '', ''],
            lieIndex: null,
            timer: null,
            backgroundMusic: null,
            votes: [0, 0, 0],
            votedStatement: null,
            hasVoted: false,
            gameStarted: false,
            lieRevealed: false
        };

        this.isRevealingLie = false;

        this.currentPage = 'admin';
        this.timerInterval = null;
        this.timeRemaining = 0;
        this.phaserGame = null;
        this.backgroundAudio = null;
        this.musicEnabled = true; // legacy flag (proxied to musicService)
        this.realTimeUpdateInterval = null;
        this.socket = null;
        this.participantCount = 0;

        this.init();
    }

    init() {
        this.setupEventListeners();
        this.initializePhaser();
        this.loadDefaultMusic();
        musicService.setEnabled(this.musicEnabled);
        musicService.updateButtons();
        this.updateMusicButtonText();
        this.checkURLForGameId();
    }

    setupEventListeners() {
        // Admin form submission
        document.getElementById('admin-form').addEventListener('submit', (e) =&amp;gt; {
            e.preventDefault();
            this.handleGameStart();
        });

        // File uploads
        document.getElementById('teammate-picture').addEventListener('change', (e) =&amp;gt; {
            this.handlePictureUpload(e);
        });

        document.getElementById('background-music').addEventListener('change', (e) =&amp;gt; {
            this.handleMusicUpload(e);
        });

        // Copy link button
        document.getElementById('copy-link').addEventListener('click', () =&amp;gt; {
            this.copyGameLink();
        });

        // Show lie button
        document.getElementById('show-lie-btn').addEventListener('click', () =&amp;gt; {
            this.revealLie();
        });

        // Statement selection
        document.querySelectorAll('.statement-option').forEach(button =&amp;gt; {
            button.addEventListener('click', (e) =&amp;gt; {
                this.selectStatement(e.target.closest('.statement-option'));
            });
        });

        // Submit vote button
        document.getElementById('submit-vote').addEventListener('click', () =&amp;gt; {
            this.submitVote();
        });

        // Music toggle buttons (will be added to voting and results pages)
        document.addEventListener('click', (e) =&amp;gt; {
            if (e.target.classList.contains('music-toggle-btn')) {
                this.toggleMusic();
            }
        });
    }

    initializePhaser() {
        // Initialize Phaser for animations
        const config = {
            type: Phaser.AUTO,
            width: window.innerWidth,
            height: window.innerHeight,
            parent: 'phaser-container',
            transparent: true,
            physics: {
                default: 'arcade',
                arcade: {
                    gravity: { y: 300 },
                    debug: false
                }
            },
            scene: {
                preload: () =&amp;gt; this.preloadAssets(),
                create: () =&amp;gt; this.createAnimations()
            }
        };

        this.phaserGame = new Phaser.Game(config);
    }

    preloadAssets() {
        const scene = this.phaserGame.scene.scenes[0];

        // Load SVG assets for better quality particles
        scene.load.image('star', 'assets/images/star.svg');
        scene.load.image('confetti', 'assets/images/confetti.svg');

        // Create simple colored rectangles as fallback for thumbs down
        scene.add.graphics()
            .fillStyle(0xFF6B6B)
            .fillRect(0, 0, 12, 16)
            .generateTexture('thumbsdown', 12, 16);

        // Start loading assets
        scene.load.start();
    }

    createAnimations() {
        // Store scene reference for later use
        this.phaserScene = this.phaserGame.scene.scenes[0];
    }

    loadDefaultMusic() {
        this.backgroundAudio = document.getElementById('background-audio');
        musicService.init(this.backgroundAudio);
    }

    async checkURLForGameId() {
        const urlParams = new URLSearchParams(window.location.search);
        const gameId = urlParams.get('game');

        if (gameId) {
            // This is a voting page
            this.gameData.id = gameId;
            this.gameData.admin = false;

            // Try to load game data with retry logic for server availability
            const success = await this.loadGameDataWithRetry(gameId, 3, 1000);
            if (success) {
                this.showPage('voting');
            } else {
                alert('Game not found or has expired. Please check the link or try again later.');
                // Redirect to home page
                window.location.href = window.location.pathname;
            }
        } else {
            // This is the admin page
            this.gameData.admin = true;
            this.showPage('admin');
        }
    }

    handlePictureUpload(event) {
        const file = event.target.files[0];
        if (file &amp;amp;&amp;amp; file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = (e) =&amp;gt; {
                this.gameData.teammate.pictureUrl = e.target.result;
                this.displayPicturePreview(e.target.result);
            };
            reader.readAsDataURL(file);
        }
    }

    displayPicturePreview(imageUrl) {
        const preview = document.getElementById('picture-preview');
        preview.innerHTML = `&amp;lt;img src=&amp;quot;${imageUrl}&amp;quot; alt=&amp;quot;Preview&amp;quot; style=&amp;quot;max-width: 200px; border-radius: 12px;&amp;quot;&amp;gt;`;
    }

    handleMusicUpload(event) {
        console.log('🎵 Processing music upload...');
        const file = event.target.files[0];

        if (!file) {
            console.log('📝 No file selected, clearing background music');
            this.gameData.backgroundMusic = null;
            return;
        }

        console.log('📁 File selected:', {
            name: file.name,
            size: file.size,
            type: file.type,
            sizeInMB: (file.size / 1024 / 1024).toFixed(2)
        });

        // Validate file type
        if (!file.type.startsWith('audio/')) {
            console.error('❌ Invalid file type:', file.type);
            alert('Please select an audio file (MP3, WAV, etc.)');
            event.target.value = ''; // Clear the input
            this.gameData.backgroundMusic = null;
            return;
        }

        // Validate file size (max 10MB)
        const maxSizeInMB = 10;
        if (file.size &amp;gt; maxSizeInMB * 1024 * 1024) {
            console.error('❌ File too large:', (file.size / 1024 / 1024).toFixed(2), 'MB');
            alert(`File too large. Please select an audio file smaller than ${maxSizeInMB}MB.`);
            event.target.value = ''; // Clear the input
            this.gameData.backgroundMusic = null;
            return;
        }

        try {
            const reader = new FileReader();

            reader.onload = (e) =&amp;gt; {
                console.log('✅ Music file loaded successfully');
                this.gameData.backgroundMusic = e.target.result;
            };

            reader.onerror = (error) =&amp;gt; {
                console.error('❌ Error reading music file:', error);
                alert('Error reading music file. Please try again or select a different file.');
                event.target.value = ''; // Clear the input
                this.gameData.backgroundMusic = null;
            };

            reader.onabort = () =&amp;gt; {
                console.warn('⚠️ Music file reading aborted');
                this.gameData.backgroundMusic = null;
            };

            console.log('🔄 Starting file read...');
            reader.readAsDataURL(file);

        } catch (error) {
            console.error('❌ Unexpected error in music upload:', error);
            alert('Unexpected error processing music file. Please try again.');
            event.target.value = ''; // Clear the input
            this.gameData.backgroundMusic = null;
        }
    }

    async handleGameStart() {
        console.log('🎮 Starting game creation...');

        try {
            // Collect form data
            const teammateNameElement = document.getElementById('teammate-name');
            const statement1Element = document.getElementById('statement-1');
            const statement2Element = document.getElementById('statement-2');
            const statement3Element = document.getElementById('statement-3');
            const lieStatementElement = document.getElementById('lie-statement');
            const votingTimerElement = document.getElementById('voting-timer');

            console.log('📝 Form elements found:', {
                teammateNameElement: !!teammateNameElement,
                statement1Element: !!statement1Element,
                statement2Element: !!statement2Element,
                statement3Element: !!statement3Element,
                lieStatementElement: !!lieStatementElement,
                votingTimerElement: !!votingTimerElement
            });

            // Validate timer input
            let timerDuration = null;
            if (votingTimerElement?.value) {
                const timerValue = parseInt(votingTimerElement.value);
                if (isNaN(timerValue) || timerValue &amp;lt; 10 || timerValue &amp;gt; 600) {
                    console.error('❌ Invalid timer duration:', votingTimerElement.value);
                    alert('Timer must be between 10 and 600 seconds (10 minutes max)');
                    votingTimerElement.focus();
                    return;
                }
                timerDuration = timerValue;
                console.log('⏱️ Timer validated:', timerDuration, 'seconds');
            }

            // Validate lie index
            let lieIndex = -1;
            if (lieStatementElement?.value) {
                const lieValue = parseInt(lieStatementElement.value);
                if (isNaN(lieValue) || lieValue &amp;lt; 1 || lieValue &amp;gt; 3) {
                    console.error('❌ Invalid lie index:', lieStatementElement.value);
                    alert('Please select which statement is the lie (1, 2, or 3)');
                    lieStatementElement.focus();
                    return;
                }
                lieIndex = lieValue - 1; // Convert to 0-based index
                console.log('🎯 Lie index validated:', lieIndex);
            }

            const gameData = {
                teammate_name: teammateNameElement?.value?.trim() || '',
                teammate_picture: this.gameData.teammate.pictureUrl || '',
                statement_1: statement1Element?.value?.trim() || '',
                statement_2: statement2Element?.value?.trim() || '',
                statement_3: statement3Element?.value?.trim() || '',
                lie_index: lieIndex,
                timer_duration: timerDuration,
                background_music: this.gameData.backgroundMusic || null
            };

            console.log('📊 Collected game data:', {
                ...gameData,
                background_music: gameData.background_music ? 'present' : 'none'
            });

            // Enhanced validation with specific error messages
            const validationErrors = [];

            if (!gameData.teammate_name) validationErrors.push('Teammate name is required');
            if (!gameData.teammate_picture) validationErrors.push('Profile picture is required');
            if (!gameData.statement_1) validationErrors.push('Statement 1 is required');
            if (!gameData.statement_2) validationErrors.push('Statement 2 is required');
            if (!gameData.statement_3) validationErrors.push('Statement 3 is required');
            if (gameData.lie_index &amp;lt; 0) validationErrors.push('Please select which statement is the lie');

            if (validationErrors.length &amp;gt; 0) {
                console.error('❌ Validation failed:', validationErrors);
                alert('Please fix the following issues:\n• ' + validationErrors.join('\n• '));
                return;
            }

            console.log('✅ Validation passed, making API call...');

            // Show loading state
            this.setLoadingState(true);

            // Add creator session to game data
            gameData.creator_session = apiService.userSession;

            // Create game via API
            console.log('🌐 Calling apiService.createGame...');
            const response = await apiService.createGame(gameData);
            console.log('✅ API response received:', response);

            // Update local game data
            this.gameData.id = response.game.id;
            this.gameData.admin = true;
            this.gameData.teammate.name = response.game.teammate_name;
            this.gameData.teammate.pictureUrl = response.game.teammate_picture;
            this.gameData.statements = response.game.statements;
            this.gameData.lieIndex = gameData.lie_index;
            this.gameData.timer = response.game.timer_duration;
            this.gameData.gameStarted = true;

            console.log('🎯 Game data updated:', this.gameData);

            // Connect to WebSocket as admin
            console.log('🔌 Connecting to WebSocket...');
            this.socket = await apiService.connectWebSocket(this.gameData.id, true);
            this.setupWebSocketListeners();

            // Show game controls
            document.getElementById('admin-form').style.display = 'none';
            document.getElementById('game-controls').style.display = 'block';

            // Generate and display game link
            const gameLink = `${window.location.origin}${window.location.pathname}?game=${this.gameData.id}`;
            document.getElementById('game-link').value = gameLink;

            console.log('🔗 Game link generated:', gameLink);

            // Start timer if set
            if (this.gameData.timer) {
                console.log('⏱️ Starting timer for', this.gameData.timer, 'seconds');
                this.startTimer();
            }

            // Copy link to clipboard automatically
            this.copyGameLink();

            this.setLoadingState(false);
            console.log('🎉 Game creation completed successfully!');

        } catch (error) {
            console.error('❌ Error starting game:', {
                message: error.message,
                stack: error.stack
            });

            let userMessage = 'Failed to start game: ';
            if (error.message.includes('Network')) {
                userMessage += 'Network error. Please check your connection and try again.';
            } else if (error.message.includes('validation')) {
                userMessage += 'Please check your form inputs and try again.';
            } else {
                userMessage += error.message || 'Unknown error occurred. Please try again.';
            }

            alert(userMessage);
            this.setLoadingState(false);
        }
    }

    validateGameData() {
        return this.gameData.teammate.name &amp;amp;&amp;amp;
               this.gameData.teammate.pictureUrl &amp;amp;&amp;amp;
               this.gameData.statements.every(s =&amp;gt; s.trim()) &amp;amp;&amp;amp;
               this.gameData.lieIndex !== null;
    }

    generateGameId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    // This method is no longer needed as data is stored in the database
    // Kept for backward compatibility but does nothing
    saveGameData() {
        // No longer needed - data is stored in database
    }

    async loadGameData(gameId) {
        try {
            const response = await apiService.getGame(gameId);
            if (response.success) {
                const game = response.game;

                // Update local game data
                this.gameData.id = game.id;
                this.gameData.teammate.name = game.teammate_name;
                this.gameData.teammate.pictureUrl = game.teammate_picture;
                this.gameData.statements = game.statements;
                this.gameData.timer = game.timer_duration;
                this.gameData.timerStartTime = game.timer_start_time;
                this.gameData.backgroundMusic = game.background_music;
                this.gameData.lieRevealed = game.lie_revealed;
                this.gameData.lieIndex = game.lie_index;
                this.gameData.votes = game.votes;
                this.gameData.gameStarted = game.game_started;

                // Check if user has voted
                const voteStatus = await apiService.checkVoteStatus(gameId);
                if (voteStatus.success &amp;amp;&amp;amp; voteStatus.hasVoted) {
                    this.gameData.hasVoted = true;
                    this.gameData.votedStatement = voteStatus.votedStatement;
                }

                // Connect to WebSocket as participant
                this.socket = await apiService.connectWebSocket(gameId, false);
                this.setupWebSocketListeners();

                this.populateVotingPage();
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error loading game data:', error);
            return false;
        }
    }

    async loadGameDataWithRetry(gameId, maxRetries = 3, delayMs = 1000) {
        for (let attempt = 1; attempt &amp;lt;= maxRetries; attempt++) {
            console.log(`🔄 Loading game data (attempt ${attempt}/${maxRetries})...`);

            try {
                const success = await this.loadGameData(gameId);
                if (success) {
                    console.log('✅ Game data loaded successfully');
                    return true;
                }

                // If the request succeeded but didn't find the game, don't retry
                console.log('❌ Game not found, not retrying');
                return false;

            } catch (error) {
                console.error(`❌ Attempt ${attempt} failed:`, error.message);

                // If this was the last attempt, fail
                if (attempt === maxRetries) {
                    console.error('❌ All retry attempts failed');
                    return false;
                }

                // Wait before retrying (only if it's a network/server error)
                if (error.message.includes('fetch') || error.message.includes('Network') || error.message.includes('Failed to fetch')) {
                    console.log(`⏳ Waiting ${delayMs}ms before retry...`);
                    await new Promise(resolve =&amp;gt; setTimeout(resolve, delayMs));
                    delayMs *= 1.5; // Exponential backoff
                } else {
                    // For non-network errors, don't retry
                    console.log('❌ Non-network error, not retrying');
                    return false;
                }
            }
        }
        return false;
    }

    populateVotingPage() {
        // Set participant info
        document.getElementById('participant-img').src = this.gameData.teammate.pictureUrl;
        document.getElementById('participant-name').textContent = this.gameData.teammate.name;

        // Set statements
        document.getElementById('vote-statement-1').textContent = this.gameData.statements[0];
        document.getElementById('vote-statement-2').textContent = this.gameData.statements[1];
        document.getElementById('vote-statement-3').textContent = this.gameData.statements[2];

        // Check if timer is active
        if (this.gameData.timer &amp;amp;&amp;amp; this.gameData.gameStarted) {
            this.checkTimerStatus();
        }
    }

    populateResultsPage() {
        // Set participant info (for results page display)
        const resultsTitleElement = document.querySelector('#results-page h2');
        if (resultsTitleElement &amp;amp;&amp;amp; this.gameData.teammate.name) {
            resultsTitleElement.textContent = `Results for ${this.gameData.teammate.name}`;
        }

        // Set statement labels in results
        for (let i = 0; i &amp;lt; 3; i++) {
            const label = document.querySelector(`#result-${i + 1} .result-label`);
            if (label &amp;amp;&amp;amp; this.gameData.statements[i]) {
                label.textContent = `Statement ${i + 1}: ${this.gameData.statements[i].substring(0, 30)}...`;
            }
        }
    }

    startBackgroundMusic() {
        if (!this.musicEnabled) return;

        const customSrc = this.gameData.backgroundMusic || undefined;
        musicService.maybeStartForPage(this.currentPage, customSrc);
    }

    stopBackgroundMusic() {
        musicService.stop();
    }

    toggleMusic() {
        this.musicEnabled = !this.musicEnabled;
        musicService.setEnabled(this.musicEnabled);

        // Honor page gating
        if (this.musicEnabled) {
            const customSrc = this.gameData.backgroundMusic || undefined;
            musicService.maybeStartForPage(this.currentPage, customSrc);
        } else {
            musicService.stop();
        }

        // Update button text
        this.updateMusicButtonText();
    }

    updateMusicButtonText() {
        const musicButtons = document.querySelectorAll('.music-toggle-btn');
        musicButtons.forEach(btn =&amp;gt; {
            btn.textContent = this.musicEnabled ? '🔊 Music On' : '🔇 Music Off';
        });
    }

    startRealTimeUpdates() {
        // Clear any existing interval
        if (this.realTimeUpdateInterval) {
            clearInterval(this.realTimeUpdateInterval);
        }

        // Start polling for updates every 2 seconds
        this.realTimeUpdateInterval = setInterval(() =&amp;gt; {
            this.checkForUpdates();
        }, 2000);
    }

    stopRealTimeUpdates() {
        if (this.realTimeUpdateInterval) {
            clearInterval(this.realTimeUpdateInterval);
            this.realTimeUpdateInterval = null;
        }
    }

        setupWebSocketListeners() {
        if (!this.socket) return;

        // Listen for vote updates
        apiService.onVoteUpdate((data) =&amp;gt; {
            if (data.gameId === this.gameData.id) {
                this.gameData.votes = data.votes;
                if (this.currentPage === 'results') {
                    this.updateResults();
                }
            }
        });

        // Listen for lie reveals
        apiService.onLieRevealed((data) =&amp;gt; {
            if (data.gameId === this.gameData.id) {
                console.log('🔌 WebSocket: Lie revealed event received', data);
                this.gameData.lieRevealed = true;
                this.gameData.lieIndex = data.lieIndex;

                // Only show UI for non-admin users (admin already handles it manually)
                if (!this.gameData.admin &amp;amp;&amp;amp; this.currentPage === 'results') {
                    console.log('🎭 Showing lie reveal for non-admin user');
                    this.showLieRevealForUsers();
                } else {
                    console.log('⚠️ Admin user - UI already updated via manual trigger');
                }
            }
        });

        // Listen for game updates
        apiService.onGameUpdate((data) =&amp;gt; {
            if (data.gameId === this.gameData.id) {
                // Update game state
                this.gameData.votes = data.votes;
                this.gameData.lieRevealed = data.lie_revealed;
                this.gameData.lieIndex = data.lie_index;

                if (this.currentPage === 'results') {
                    this.updateResults();
                }
            }
        });

        // Listen for participant count updates
        apiService.onParticipantCountUpdate((data) =&amp;gt; {
            this.participantCount = data.count;
            this.updateParticipantCount();
        });

        // Listen for timer updates
        apiService.onTimerUpdate((data) =&amp;gt; {
            if (!this.gameData.admin) {
                this.timeRemaining = data.timeRemaining;
                this.updateTimerDisplay();
            }
        });

        console.log('✅ WebSocket listeners setup complete');
    }

    updateParticipantCount() {
        // You can add UI element to show participant count if needed
        console.log(`👥 Participants: ${this.participantCount}`);
    }

    setLoadingState(loading) {
        const elements = document.querySelectorAll('button, input, select, textarea');
        elements.forEach(el =&amp;gt; {
            el.disabled = loading;
        });

        if (loading) {
            document.body.style.cursor = 'wait';
        } else {
            document.body.style.cursor = 'default';
        }
    }

    startTimer() {
        this.timeRemaining = this.gameData.timer;
        this.gameData.timerStartTime = Date.now();
        this.saveGameData();

        this.updateTimerDisplay();
        this.timerInterval = setInterval(() =&amp;gt; {
            this.timeRemaining--;
            this.updateTimerDisplay();

            if (this.timeRemaining &amp;lt;= 0) {
                this.timeExpired();
            }
        }, 1000);
    }

    checkTimerStatus() {
        if (this.gameData.timerStartTime) {
            const elapsed = Math.floor((Date.now() - this.gameData.timerStartTime) / 1000);
            this.timeRemaining = Math.max(0, this.gameData.timer - elapsed);

            if (this.timeRemaining &amp;gt; 0) {
                document.getElementById('timer-display').style.display = 'block';
                this.updateTimerDisplay();
                this.timerInterval = setInterval(() =&amp;gt; {
                    this.timeRemaining--;
                    this.updateTimerDisplay();

                    if (this.timeRemaining &amp;lt;= 0) {
                        this.timeExpired();
                    }
                }, 1000);
            } else {
                this.timeExpired();
            }
        }
    }

    updateTimerDisplay() {
        const minutes = Math.floor(this.timeRemaining / 60);
        const seconds = this.timeRemaining % 60;
        const display = `${minutes}:${seconds.toString().padStart(2, '0')}`;

        const timerElement = document.getElementById('timer-display');
        timerElement.textContent = display;
        timerElement.style.display = 'block';

        // Change color when time is running out
        if (this.timeRemaining &amp;lt;= 10) {
            timerElement.style.color = '#ff6b6b';
            timerElement.style.animation = 'pulse 1s infinite';
        }
    }

    timeExpired() {
        clearInterval(this.timerInterval);

        // Disable voting if on voting page
        if (this.currentPage === 'voting' &amp;amp;&amp;amp; !this.gameData.hasVoted) {
            this.disableVoting();
        }

        // Auto-redirect to results
        this.showPage('results');
        this.updateResults();

        // Note: Lie reveal is now manual only via the &amp;quot;Show Lie&amp;quot; button
        // This prevents duplicate API calls and gives admin control over timing
    }

    selectStatement(button) {
        // Remove previous selection
        document.querySelectorAll('.statement-option').forEach(btn =&amp;gt; {
            btn.classList.remove('selected');
        });

        // Add selection to clicked button
        button.classList.add('selected');

        // Enable submit button
        const submitBtn = document.getElementById('submit-vote');
        submitBtn.disabled = false;

        // Store selected statement
        this.gameData.votedStatement = parseInt(button.dataset.statement) - 1;
    }

    async submitVote() {
        if (this.gameData.votedStatement === null || this.gameData.hasVoted) {
            return;
        }

        try {
            this.setLoadingState(true);

            // Submit vote via API
            const response = await apiService.submitVote(this.gameData.id, this.gameData.votedStatement);

            if (response.success) {
                // Update local state
                this.gameData.hasVoted = true;
                this.gameData.votes = response.currentVotes;

                // Show results page
                this.showPage('results');
                this.updateResults();
            }

            this.setLoadingState(false);

        } catch (error) {
            console.error('Error submitting vote:', error);
            if (error.message.includes('already voted')) {
                alert('You have already voted for this game.');
                this.gameData.hasVoted = true;
                this.showPage('results');
            } else {
                alert('Failed to submit vote. Please try again.');
            }
            this.setLoadingState(false);
        }
    }

    // This method is no longer needed as votes are handled by the API
    // Kept for backward compatibility but does nothing
    incrementVote(statementIndex) {
        // No longer needed - handled by API
    }

    disableVoting() {
        document.querySelectorAll('.statement-option').forEach(btn =&amp;gt; {
            btn.disabled = true;
            btn.style.opacity = '0.6';
        });

        document.getElementById('submit-vote').disabled = true;
    }

    copyGameLink() {
        const linkInput = document.getElementById('game-link');
        linkInput.select();
        linkInput.setSelectionRange(0, 99999); // For mobile devices

        navigator.clipboard.writeText(linkInput.value).then(() =&amp;gt; {
            const button = document.getElementById('copy-link');
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            button.style.background = '#51cf66';

            setTimeout(() =&amp;gt; {
                button.textContent = originalText;
                button.style.background = '';
            }, 2000);
        });
    }

    async revealLie() {
        if (!this.gameData.admin) {
            console.warn('🚫 revealLie called but user is not admin');
            return;
        }

        console.log('🎯 Starting lie reveal process...', {
            gameId: this.gameData.id,
            hasSocket: !!this.socket,
            socketConnected: this.socket?.connected,
            lieAlreadyRevealed: this.gameData.lieRevealed,
            lieIndex: this.gameData.lieIndex
        });

        // Check if lie is already revealed locally
        if (this.gameData.lieRevealed) {
            console.warn('⚠️ Lie already revealed locally, skipping API call');
            this.showLieRevealUI();
            return;
        }

        // Also check if the button is disabled (UI state check)
        const showLieBtn = document.getElementById('show-lie-btn');
        if (showLieBtn &amp;amp;&amp;amp; (showLieBtn.disabled || showLieBtn.textContent === 'Lie Revealed')) {
            console.warn('⚠️ Show lie button is disabled or already shows &amp;quot;Lie Revealed&amp;quot;, skipping API call');
            this.gameData.lieRevealed = true;
            this.showLieRevealUI();
            return;
        }

        // Add flag to prevent multiple simultaneous calls
        if (this.isRevealingLie) {
            console.warn('⚠️ Lie reveal already in progress, skipping duplicate call');
            return;
        }

        this.isRevealingLie = true;

        try {
            // Check WebSocket connection state before proceeding
            if (!this.socket) {
                console.error('❌ No WebSocket connection available');
                throw new Error('WebSocket connection not available. Please refresh the page.');
            }

            if (!this.socket.connected) {
                console.error('❌ WebSocket not connected');
                throw new Error('WebSocket disconnected. Please refresh the page.');
            }

            console.log('📡 Making single API call to reveal lie...');
            // Make API call - server will handle WebSocket broadcast
            const response = await apiService.revealLie(this.gameData.id);
            console.log('✅ API response received:', response);

            // Note: WebSocket event will be sent by server to all users
            // Admin UI is updated here, other users get WebSocket event

            // Handle &amp;quot;already revealed&amp;quot; case gracefully
            if (response &amp;amp;&amp;amp; response.alreadyRevealed) {
                console.log('ℹ️ Lie was already revealed on server, updating local state');
                this.gameData.lieRevealed = true;
                this.showLieRevealUI();
                return;
            }

            // Update local state
            this.gameData.lieRevealed = true;

            console.log('🎨 Updating UI...');
            // Update UI
            this.showLieRevealUI();

            console.log('🎉 Lie reveal completed successfully!');

        } catch (error) {
            console.error('❌ Error revealing lie:', {
                message: error.message,
                stack: error.stack,
                gameId: this.gameData.id,
                socketState: this.socket ? {
                    connected: this.socket.connected,
                    id: this.socket.id
                } : 'no socket'
            });

            // Check if the error is because lie was already revealed
            if (error.message &amp;amp;&amp;amp; (error.message.includes('already revealed') || error.message.includes('Game not found or lie already revealed'))) {
                console.log('ℹ️ Lie was already revealed on server, updating local state');
                this.gameData.lieRevealed = true;
                this.showLieRevealUI();
                return;
            }

            // More specific error messages
            let userMessage = 'Failed to reveal lie. ';
            if (error.message.includes('WebSocket')) {
                userMessage += 'Connection issue detected. Please refresh the page and try again.';
            } else if (error.message.includes('Network')) {
                userMessage += 'Network error. Please check your connection and try again.';
            } else {
                userMessage += 'Please try again or refresh the page.';
            }

            alert(userMessage);
        } finally {
            // Reset flag to allow future calls
            this.isRevealingLie = false;
        }
    }

    showLieRevealUI() {
        const lieReveal = document.getElementById('lie-reveal');
        const revealedLie = document.getElementById('revealed-lie');

        if (revealedLie &amp;amp;&amp;amp; this.gameData.statements[this.gameData.lieIndex]) {
            revealedLie.textContent = this.gameData.statements[this.gameData.lieIndex];
            lieReveal.style.display = 'block';
        }

        // Update results to highlight correct answer
        this.highlightCorrectAnswer();

        // Disable show lie button if admin
        if (this.gameData.admin) {
            const showLieBtn = document.getElementById('show-lie-btn');
            if (showLieBtn) {
                showLieBtn.disabled = true;
                showLieBtn.textContent = 'Lie Revealed';
            }

            // Trigger FIREWORKS for admin lie reveal! 🎆
            console.log('🎆 Triggering fireworks for admin lie reveal!');
            this.showFireworksAnimation();
        }

        // Show feedback animation AFTER lie is revealed and highlighted
        setTimeout(() =&amp;gt; {
            if (this.gameData.hasVoted) {
                // Show animation based on user's vote
                this.showFeedbackAnimation(this.gameData.votedStatement === this.gameData.lieIndex);
            } else {
                // Show general celebration for lie reveal
                this.showFeedbackAnimation(true);
            }
        }, 1000);
    }

    updateResults() {
        const totalVotes = this.gameData.votes.reduce((a, b) =&amp;gt; a + b, 0);

        for (let i = 0; i &amp;lt; 3; i++) {
            const percentage = totalVotes &amp;gt; 0 ? Math.round((this.gameData.votes[i] / totalVotes) * 100) : 0;
            const barFill = document.querySelector(`#result-${i + 1} .bar-fill`);
            const percentageLabel = document.querySelector(`#result-${i + 1} .result-percentage`);

            if (barFill &amp;amp;&amp;amp; percentageLabel) {
                barFill.style.width = `${percentage}%`;
                barFill.dataset.percentage = percentage;
                percentageLabel.textContent = `${percentage}%`;
            }

            // Update label with statement preview
            const label = document.querySelector(`#result-${i + 1} .result-label`);
            if (label &amp;amp;&amp;amp; this.gameData.statements[i]) {
                label.textContent = `Statement ${i + 1}: ${this.gameData.statements[i].substring(0, 30)}...`;
            }
        }

        // Check if lie is already revealed
        if (this.gameData.lieRevealed) {
            this.showLieRevealForUsers();
        }
    }

    highlightCorrectAnswer() {
        for (let i = 0; i &amp;lt; 3; i++) {
            const resultElement = document.querySelector(`#result-${i + 1}`);
            if (resultElement) {
                if (i === this.gameData.lieIndex) {
                    resultElement.classList.add('correct-answer');
                    resultElement.style.background = 'linear-gradient(135deg, #ff6b9d, #feca57)';
                    resultElement.style.boxShadow = '0 0 20px rgba(255, 107, 157, 0.5)';
                    resultElement.style.animation = 'highlight 2s ease-in-out infinite';
                } else {
                    resultElement.classList.remove('correct-answer');
                }
            }
        }
    }

    showLieRevealForUsers() {
        console.log('🎭 Showing lie reveal for users...');

        // This function handles lie reveal display for non-admin users
        const lieReveal = document.getElementById('lie-reveal');
        const revealedLie = document.getElementById('revealed-lie');

        if (revealedLie &amp;amp;&amp;amp; this.gameData.statements[this.gameData.lieIndex]) {
            revealedLie.textContent = this.gameData.statements[this.gameData.lieIndex];
            if (lieReveal) {
                lieReveal.style.display = 'block';
            }
        }

        // Update results to highlight correct answer
        this.highlightCorrectAnswer();

        // Show feedback animation for users
        setTimeout(() =&amp;gt; {
            if (this.gameData.hasVoted) {
                // Show animation based on user's vote
                this.showFeedbackAnimation(this.gameData.votedStatement === this.gameData.lieIndex);
            } else {
                // Show general celebration for lie reveal
                this.showFeedbackAnimation(true);
            }
        }, 1000);
    }

    showFeedbackAnimation(correct) {
        if (!this.phaserScene) return;

        const scene = this.phaserScene;

        if (correct) {
            // Show fireworks animation
            this.createFireworks(scene);
        } else {
            // Show thumbs down animation
            this.createThumbsDownRain(scene);
        }
    }

    createFireworks(scene) {
        // Create multiple firework bursts with both stars and confetti
        const colors = [0xFFD700, 0xFF6B6B, 0x51CF66, 0x667EEA, 0xFF8C42];
        const textures = ['star', 'confetti'];

        for (let i = 0; i &amp;lt; 8; i++) {
            setTimeout(() =&amp;gt; {
                const x = Phaser.Math.Between(100, window.innerWidth - 100);
                const y = Phaser.Math.Between(100, window.innerHeight - 100);
                const color = colors[Math.floor(Math.random() * colors.length)];
                const texture = textures[Math.floor(Math.random() * textures.length)];

                // Create particle emitter for firework
                const particles = scene.add.particles(x, y, texture, {
                    speed: { min: 100, max: 300 },
                    scale: { start: 1, end: 0 },
                    tint: color,
                    lifespan: 1500,
                    quantity: 20,
                    gravityY: 50
                });

                // Add a secondary burst for more dramatic effect
                if (i % 2 === 0) {
                    setTimeout(() =&amp;gt; {
                        const secondaryParticles = scene.add.particles(x, y, 'star', {
                            speed: { min: 50, max: 150 },
                            scale: { start: 0.8, end: 0 },
                            tint: 0xFFD700,
                            lifespan: 1000,
                            quantity: 10
                        });

                        setTimeout(() =&amp;gt; {
                            secondaryParticles.destroy();
                        }, 1500);
                    }, 300);
                }

                // Remove after animation
                setTimeout(() =&amp;gt; {
                    particles.destroy();
                }, 2500);
            }, i * 150);
        }
    }

    createThumbsDownRain(scene) {
        // Create falling thumbs down icons
        for (let i = 0; i &amp;lt; 10; i++) {
            setTimeout(() =&amp;gt; {
                const x = Phaser.Math.Between(0, window.innerWidth);

                const particles = scene.add.particles(x, -50, 'thumbsdown', {
                    speedY: { min: 100, max: 200 },
                    speedX: { min: -50, max: 50 },
                    scale: { min: 0.5, max: 1 },
                    tint: 0xFF6B6B,
                    lifespan: 3000,
                    quantity: 1,
                    frequency: 100
                });

                // Remove after animation
                setTimeout(() =&amp;gt; {
                    particles.destroy();
                }, 4000);
            }, i * 100);
        }
    }

    showPage(pageName) {
        // Hide all pages
        document.querySelectorAll('.page').forEach(page =&amp;gt; {
            page.classList.remove('active');
        });

        // Show selected page
        document.getElementById(`${pageName}-page`).classList.add('active');
        this.currentPage = pageName;

        // Stop any existing real-time updates
        this.stopRealTimeUpdates();

        // Handle music based on page - ONLY on voting and results
        if (pageName === 'voting' || pageName === 'results') {
            this.startBackgroundMusic();
        } else {
            this.stopBackgroundMusic();
        }

        // Populate page data and start real-time updates
        if (pageName === 'voting') {
            this.populateVotingPage();
            if (!this.gameData.admin) {
                this.startRealTimeUpdates();
            }
        } else if (pageName === 'results') {
            this.populateResultsPage();
            this.updateResults();
            this.startRealTimeUpdates();
        }
    }

    cleanup() {
        // Stop intervals
        this.stopRealTimeUpdates();

        // Disconnect WebSocket
        if (this.socket) {
            apiService.disconnectWebSocket();
            this.socket = null;
        }

        // Stop music
        this.stopBackgroundMusic();

        // Clear timers
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        console.log('🧹 Game cleanup completed');
    }

    showFireworksAnimation() {
        if (!this.phaserGame) {
            console.warn('⚠️ Phaser game not available for fireworks');
            return;
        }

        console.log('🎆 Creating fireworks animation...');

        // Pop-art color palette from VAN design
        const colors = [0xff6b9d, 0x4ecdc4, 0xfeca57, 0x45b7d1];
        const scene = this.phaserGame.scene.scenes[0]; // Get the active scene

        if (!scene) {
            console.warn('⚠️ No active Phaser scene for fireworks');
            return;
        }

        // Create multiple firework bursts
        const burstCount = 4;
        const fireworksGroup = scene.add.group();

        for (let burst = 0; burst &amp;lt; burstCount; burst++) {
            setTimeout(() =&amp;gt; {
                this.createFireworksBurst(scene, colors, fireworksGroup, burst);
            }, burst * 300); // Stagger the bursts
        }

        // Cleanup after animation completes
        setTimeout(() =&amp;gt; {
            fireworksGroup.clear(true, true);
            console.log('🎆 Fireworks animation completed');
        }, 4000);
    }

    createFireworksBurst(scene, colors, group, burstIndex) {
        // Random position for this burst
        const width = scene.cameras.main.width;
        const height = scene.cameras.main.height;
        const centerX = width * (0.3 + Math.random() * 0.4); // Central area
        const centerY = height * (0.2 + Math.random() * 0.3); // Upper area

        console.log(`🎇 Creating fireworks burst ${burstIndex + 1} at`, centerX, centerY);

        // Create pointillism-style firework particles
        const particleCount = 30 + Math.random() * 20; // 30-50 particles
        const burstColor = colors[burstIndex % colors.length];

        for (let i = 0; i &amp;lt; particleCount; i++) {
            // Create individual particle
            const particle = scene.add.graphics();
            const size = 3 + Math.random() * 8; // Varying dot sizes

            // Pointillism circle with slight transparency
            particle.fillStyle(burstColor, 0.8 + Math.random() * 0.2);
            particle.fillCircle(0, 0, size);

            // Add white dot in center for pop-art effect
            particle.fillStyle(0xffffff, 0.6);
            particle.fillCircle(0, 0, size * 0.3);

            // Position at burst center initially
            particle.x = centerX;
            particle.y = centerY;

            // Calculate random trajectory for explosion
            const angle = (Math.PI * 2 * i) / particleCount + (Math.random() - 0.5) * 0.5;
            const velocity = 100 + Math.random() * 150;
            const endX = centerX + Math.cos(angle) * velocity;
            const endY = centerY + Math.sin(angle) * velocity + Math.random() * 100; // Slight gravity

            // Add to group for cleanup
            group.add(particle);

            // Animate the particle explosion
            scene.tweens.add({
                targets: particle,
                x: endX,
                y: endY,
                scaleX: { from: 0.1, to: 1.2 },
                scaleY: { from: 0.1, to: 1.2 },
                alpha: { from: 1, to: 0 },
                duration: 1500 + Math.random() * 1000,
                ease: 'Cubic.easeOut',
                onComplete: () =&amp;gt; {
                    particle.destroy();
                }
            });

            // Add rotation for extra pop-art flair
            scene.tweens.add({
                targets: particle,
                rotation: Math.PI * 2 * (Math.random() &amp;gt; 0.5 ? 1 : -1),
                duration: 1500 + Math.random() * 1000,
                ease: 'Power2.easeOut'
            });
        }

        // Add burst sound effect if possible
        try {
            // Create a brief audio context beep for firework sound
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.frequency.setValueAtTime(800 + Math.random() * 400, audioContext.currentTime);
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);

            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.3);
        } catch (error) {
            // Ignore audio errors (some browsers may block audio)
            console.log('🔇 Audio not available for fireworks sound');
        }
    }
}

// Initialize the game when DOM is loaded
document.addEventListener('DOMContentLoaded', () =&amp;gt; {
    window.gameInstance = new TwoTruthsGame();
});

// Cleanup intervals when page is closed
window.addEventListener('beforeunload', () =&amp;gt; {
    if (window.gameInstance) {
        window.gameInstance.cleanup();
    }
});

// Add CSS animation for pulse effect
const style = document.createElement('style');
style.textContent = `
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
`;
document.head.appendChild(style);&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;src/api.js&lt;/path&gt;
    
  
    &lt;content&gt;// API Service for Two Truths and a Lie Game
class ApiService {
    constructor() {
        // Normalize API base to always include /api
        const rawApiBase = (import.meta.env?.VITE_API_URL || 'http://localhost:3001');
        const normalizedApiBase = rawApiBase.replace(/\/$/, '');
        this.baseURL = normalizedApiBase.endsWith('/api') ? normalizedApiBase : `${normalizedApiBase}/api`;

        // WebSocket base (no /api segment)
        this.wsURL = (import.meta.env?.VITE_WS_URL || 'ws://localhost:3001').replace(/\/$/, '');
        this.socket = null;
        this.userSession = this.getUserSession();

        console.log('🔧 API Service initialized');
        console.log('📡 API URL:', this.baseURL);
        console.log('🔌 WebSocket URL:', this.wsURL);
    }

    // Generate or retrieve user session ID
    getUserSession() {
        let session = sessionStorage.getItem('userSession');
        if (!session) {
            session = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            sessionStorage.setItem('userSession', session);
        }
        return session;
    }

    // HTTP request helper
    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        const config = {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        };

        if (config.body &amp;amp;&amp;amp; typeof config.body === 'object') {
            config.body = JSON.stringify(config.body);
        }

        console.log(`🌐 Making API request to: ${url}`, {
            method: config.method || 'GET',
            body: config.body
        });

        try {
            const response = await fetch(url, config);

            console.log(`📡 API Response (${response.status}):`, response.statusText);

            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                console.error('Failed to parse JSON response:', jsonError);
                throw new Error(`Invalid JSON response from server`);
            }

            if (!response.ok) {
                console.error(`❌ API Error:`, data);

                // Don't throw error for &amp;quot;already revealed&amp;quot; case, just log it
                if (response.status === 404 &amp;amp;&amp;amp; data.error &amp;amp;&amp;amp; data.error.includes('already revealed')) {
                    console.warn('⚠️ Lie already revealed on server, this is expected');
                    return { success: false, alreadyRevealed: true, message: data.error };
                }

                throw new Error(data.error || `HTTP error! status: ${response.status}`);
            }

            console.log(`✅ API Success:`, data);
            return data;
        } catch (error) {
            // Enhance error information for better retry logic
            if (error.name === 'TypeError' &amp;amp;&amp;amp; error.message.includes('fetch')) {
                console.error(`❌ Network Error (${endpoint}):`, 'Failed to fetch - server may be unavailable');
                throw new Error(`Network error: Failed to fetch from ${endpoint}. Server may be unavailable.`);
            } else if (error.name === 'AbortError') {
                console.error(`❌ Request Timeout (${endpoint}):`, error);
                throw new Error(`Network error: Request timeout for ${endpoint}`);
            } else {
                console.error(`❌ API Request Failed (${endpoint}):`, error);
                throw error;
            }
        }
    }

    // Game API methods
    async createGame(gameData) {
        return this.request('/games', {
            method: 'POST',
            body: gameData
        });
    }

    async getGame(gameId) {
        return this.request(`/games/${gameId}`);
    }

    async revealLie(gameId) {
        return this.request(`/games/${gameId}/reveal-lie`, {
            method: 'PUT',
            body: {
                creator_session: this.userSession
            }
        });
    }

    async getGameStats(gameId) {
        return this.request(`/games/${gameId}/stats`);
    }

    // Vote API methods
    async submitVote(gameId, votedStatement) {
        return this.request('/votes', {
            method: 'POST',
            body: {
                game_id: gameId,
                voted_statement: votedStatement,
                user_session: this.userSession
            }
        });
    }

    async getVotes(gameId) {
        return this.request(`/votes/game/${gameId}`);
    }

    async checkVoteStatus(gameId) {
        return this.request(`/votes/check/${gameId}/${this.userSession}`);
    }

    // WebSocket methods
    connectWebSocket(gameId, isAdmin = false) {
        return new Promise((resolve, reject) =&amp;gt; {
            try {
                // Import socket.io-client dynamically for better compatibility
                if (typeof io === 'undefined') {
                    throw new Error('Socket.IO client not loaded');
                }

                this.socket = io(this.wsURL.replace('ws://', 'http://').replace('wss://', 'https://'));

                this.socket.on('connect', () =&amp;gt; {
                    console.log('✅ WebSocket connected');

                    // Join the game room
                    this.socket.emit('joinGame', {
                        gameId,
                        userSession: this.userSession,
                        isAdmin
                    });

                    resolve(this.socket);
                });

                this.socket.on('connect_error', (error) =&amp;gt; {
                    console.error('❌ WebSocket connection error:', error);
                    reject(error);
                });

                this.socket.on('error', (error) =&amp;gt; {
                    console.error('🔌 WebSocket error:', error);
                });

                this.socket.on('disconnect', (reason) =&amp;gt; {
                    console.log('🔌 WebSocket disconnected:', reason);
                });

            } catch (error) {
                console.error('Failed to initialize WebSocket:', error);
                reject(error);
            }
        });
    }

    disconnectWebSocket() {
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
            console.log('🔌 WebSocket disconnected');
        }
    }

    // WebSocket event listeners
    onVoteUpdate(callback) {
        if (this.socket) {
            this.socket.on('voteUpdate', callback);
        }
    }

    onLieRevealed(callback) {
        if (this.socket) {
            this.socket.on('lieRevealed', callback);
        }
    }

    onGameUpdate(callback) {
        if (this.socket) {
            this.socket.on('gameUpdate', callback);
        }
    }

    onUserJoined(callback) {
        if (this.socket) {
            this.socket.on('userJoined', callback);
        }
    }

    onUserLeft(callback) {
        if (this.socket) {
            this.socket.on('userLeft', callback);
        }
    }

    onParticipantCountUpdate(callback) {
        if (this.socket) {
            this.socket.on('participantCountUpdate', callback);
        }
    }

    onTimerUpdate(callback) {
        if (this.socket) {
            this.socket.on('timerUpdate', callback);
        }
    }

    // Admin actions via WebSocket
    revealLieViaWebSocket(gameId) {
        if (this.socket) {
            this.socket.emit('revealLie', { gameId });
        }
    }

    sendTimerUpdate(gameId, timeRemaining) {
        if (this.socket) {
            this.socket.emit('timerUpdate', { gameId, timeRemaining });
        }
    }

    requestVoteUpdate(gameId) {
        if (this.socket) {
            this.socket.emit('requestVoteUpdate', { gameId });
        }
    }

    // Health check
    async healthCheck() {
        try {
            return await this.request('/health');
        } catch (error) {
            console.error('Health check failed:', error);
            return { status: 'ERROR', error: error.message };
        }
    }
}

// Create singleton instance
export const apiService = new ApiService();&lt;/content&gt;
    

  &lt;/file&gt;
  &lt;file&gt;
    
  
    &lt;path&gt;src/services/music.js&lt;/path&gt;
    
  
    &lt;content&gt;// Centralized music control for Two Truths and a Lie
// Non-breaking extraction from main.js

export const musicService = {
	audioEl: null,
	enabled: true,

	init(audioElement) {
		this.audioEl = audioElement;
	},

	isEnabled() {
		return this.enabled;
	},

	setEnabled(enabled) {
		this.enabled = !!enabled;
		this.updateButtons();
		if (!this.enabled) {
			this.stop();
		}
	},

	// Start music if enabled; optionally override src
	start(src) {
		if (!this.audioEl || !this.enabled) return;
		if (src) {
			this.audioEl.src = src;
		}
		const playPromise = this.audioEl.play();
		if (playPromise &amp;amp;&amp;amp; typeof playPromise.catch === 'function') {
			playPromise.catch(() =&amp;gt; {
				// Fallback: wait for first user interaction
				document.addEventListener(
					'click',
					() =&amp;gt; {
						if (this.enabled &amp;amp;&amp;amp; this.audioEl &amp;amp;&amp;amp; this.audioEl.paused) {
							this.audioEl.play().catch(() =&amp;gt; {});
						}
					},
					{ once: true }
				);
			});
		}
	},

	stop() {
		if (this.audioEl &amp;amp;&amp;amp; !this.audioEl.paused) {
			this.audioEl.pause();
		}
	},

	toggle() {
		this.setEnabled(!this.enabled);
		return this.enabled;
	},

	updateButtons() {
		const buttons = document.querySelectorAll('.music-toggle-btn');
		buttons.forEach((btn) =&amp;gt; {
			btn.textContent = this.enabled ? '🔊 Music On' : '🔇 Music Off';
		});
	},

	// Only plays on voting/results pages
	maybeStartForPage(pageName, customSrc) {
		if (pageName === 'voting' || pageName === 'results') {
			this.start(customSrc);
		} else {
			this.stop();
		}
	},
};&lt;/content&gt;
    

  &lt;/file&gt;
&lt;/repository_files&gt;
&lt;statistics&gt;
  &lt;total_files&gt;30&lt;/total_files&gt;
  &lt;total_chars&gt;159832&lt;/total_chars&gt;
  &lt;total_tokens&gt;0&lt;/total_tokens&gt;
  &lt;generated_at&gt;2025-08-17 21:52:54&lt;/generated_at&gt;
&lt;/statistics&gt;
&lt;/repository&gt;</content>
    

  </file>
  <file>
    
  
    <path>Dockerfile.frontend</path>
    
  
    <content># Multi-stage build for optimized frontend
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install dependencies
RUN npm ci &amp;&amp; npm cache clean --force

# Copy source code (excluding server)
COPY . .
RUN rm -rf server/

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs &amp;&amp; \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy dependencies and application from builder
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app .

# Create required directories with proper permissions
RUN mkdir -p /app/dist /app/logs &amp;&amp; \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Set environment
ENV NODE_ENV=development
ENV VITE_HOST=0.0.0.0

# Health check using node instead of wget
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD node -e &quot;const http = require('http'); const req = http.request({host: 'localhost', port: 3000, path: '/', timeout: 5000}, (res) =&gt; process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () =&gt; process.exit(1)); req.end();&quot;

# Use dumb-init for proper signal handling
ENTRYPOINT [&quot;dumb-init&quot;, &quot;--&quot;]

# Start Vite development server
CMD [&quot;npm&quot;, &quot;run&quot;, &quot;dev&quot;, &quot;--&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;3000&quot;]</content>
    

  </file>
  <file>
    
  
    <path>memory_bank/techContext.md</path>
    
  
    <content># Tech Context

- Languages: JavaScript (frontend/backend), SQL (Postgres).
- Libraries: Express, Socket.IO, pg, dotenv, cors, Phaser, Vite.
- Env Vars: VITE_API_URL (must include /api), VITE_WS_URL, DB credentials.
- Ports: Frontend 3000, Backend 3001 (/api, WS), Postgres 5432.
- Health: /api/health endpoint; backend container healthcheck present.</content>
    

  </file>
  <file>
    
  
    <path>memory_bank/activeContext.md</path>
    
  
    <content># Active Context

- Mode: REFLECT → PLAN (Level 4 Comprehensive Testing Infrastructure)
- Current Focus: 🧪 Designing comprehensive Cypress testing strategy with 99% coverage target and Docker optimization
- Status: 📋 PLANNING - Level 4 testing infrastructure mapped with E2E, component, API, and visual regression testing
- Next: CREATIVE MODE - Design testing strategy architecture and Docker optimization patterns</content>
    

  </file>
  <file>
    
  
    <path>memory_bank/progress.md</path>
    
  
    <content># Progress Log

- Backend/WS: Implemented API + Socket.IO, DB schema, routes.
- Docker: Compose setup; fixed backend build (npm install), env URL fix (/api).
- Realtime: Vote updates + lie reveal broadcasting.
- Bugfix: Frontend API base normalization; WebSocket io injection refactor (route factories).
- UI: Music controls, page data propagation, animations after reveal.
- VAN: Applied pointillism/pop-art theme; TestIO squirrel background; dotted animations.
- VAN Assessment: Level 1 complete - visual implementation verified excellent, brand integration stable.
- PLAN: Level 3 complete - critical bugs identified (&quot;Show the Lie&quot; errors, timer/music upload), fireworks enhancement planned, Redis removal + Docker optimization mapped.
- IMPLEMENT: Level 3 complete - ✅ Critical bugs fixed with enhanced error handling, ✅ Fireworks animation added (geometric pointillism), ✅ Infrastructure optimized (Redis removed, Docker multi-stage builds, security improvements), ✅ VAN design preserved.
- Ready: REFLECT MODE to validate implementation and assess system stability.</content>
    

  </file>
  <file>
    
  
    <path>memory_bank/productContext.md</path>
    
  
    <content># Product Context

- Stakeholders: Admin host, Participants, Dev/QA.
- Primary Flows:
  - Admin sets up game (name, picture, statements, lie index, timer).
  - Participants join via link and vote.
  - Admin reveals lie or timer expires; results update live.
- Success Criteria: Smooth real-time UX, accurate results, simple sharing, delightful visuals.</content>
    

  </file>
  <file>
    
  
    <path>memory_bank/projectbrief.md</path>
    
  
    <content># Two Truths and a Lie - TestIO Edition

- Purpose: Interactive team game with real-time voting, lie reveal, and celebratory feedback.
- Audience: Team members joining via share link; admin controls the game.
- Constraints: Keep existing functionality stable; support Docker Compose; real-time via WebSockets; DB-backed.
- Branding: Use TestIO squirrel background and playful, pop-art inspired UI.</content>
    

  </file>
  <file>
    
  
    <path>memory_bank/systemPatterns.md</path>
    
  
    <content># System Patterns

- Frontend: Vite, ES modules, Socket.IO client, Phaser for animations.
- Backend: Node/Express, Socket.IO server, REST API, CORS, rate limiting.
- Storage: PostgreSQL (games, votes), Redis available for sessions.
- Realtime: Room-per-game with broadcast events (voteUpdate, lieRevealed, timerUpdate).
- Containerization: docker-compose orchestrating frontend, backend, db, redis.</content>
    

  </file>
  <file>
    
  
    <path>src/phaser-config.js</path>
    
  
    <content>// Phaser Configuration for Two Truths and a Lie Game
export const phaserConfig = {
    type: Phaser.AUTO,
    width: window.innerWidth,
    height: window.innerHeight,
    parent: 'phaser-container',
    transparent: true,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 300 },
            debug: false
        }
    },
    scale: {
        mode: Phaser.Scale.RESIZE,
        autoCenter: Phaser.Scale.CENTER_BOTH
    }
};

// Assets configuration
export const gameAssets = {
    images: {
        star: 'assets/images/star.svg',
        confetti: 'assets/images/confetti.svg',
        squirrel: 'assets/images/TestIO_squirel.png'
    },
    audio: {
        backgroundMusic: 'assets/audio/elevator_music.mp3'
    }
};

// Animation configuration
export const animationSettings = {
    fireworks: {
        colors: [0xFFD700, 0xFF6B6B, 0x51CF66, 0x667EEA, 0xFF8C42],
        textures: ['star', 'confetti'],
        particleCount: 8,
        particleSpeed: { min: 100, max: 300 },
        particleLifespan: 1500,
        gravityY: 50
    },
    thumbsDown: {
        particleCount: 10,
        particleSpeed: { min: 100, max: 200 },
        particleLifespan: 3000,
        tint: 0xFF6B6B
    }
};</content>
    

  </file>
  <file>
    
  
    <path>src/api.js</path>
    
  
    <content>// API Service for Two Truths and a Lie Game
class ApiService {
    constructor() {
        // Normalize API base to always include /api
        const rawApiBase = (import.meta.env?.VITE_API_URL || 'http://localhost:3001');
        const normalizedApiBase = rawApiBase.replace(/\/$/, '');
        this.baseURL = normalizedApiBase.endsWith('/api') ? normalizedApiBase : `${normalizedApiBase}/api`;

        // WebSocket base (no /api segment)
        this.wsURL = (import.meta.env?.VITE_WS_URL || 'ws://localhost:3001').replace(/\/$/, '');
        this.socket = null;
        this.userSession = this.getUserSession();

        console.log('🔧 API Service initialized');
        console.log('📡 API URL:', this.baseURL);
        console.log('🔌 WebSocket URL:', this.wsURL);
    }

    // Generate or retrieve user session ID
    getUserSession() {
        let session = sessionStorage.getItem('userSession');
        if (!session) {
            session = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            sessionStorage.setItem('userSession', session);
        }
        return session;
    }

    // Get authentication headers for admin requests
    getAuthHeaders() {
        const adminSession = sessionStorage.getItem('adminSession');
        if (adminSession) {
            return {
                'Authorization': `Bearer ${adminSession}`
            };
        }
        return {};
    }

    // Check if endpoint requires authentication
    needsAuth(endpoint) {
        const protectedEndpoints = [
            '/games',  // POST /games (create game)
            // Note: GET /games/:id, voting, and other endpoints don't require auth
        ];

        // Check if this is a POST to /games (create game)
        return protectedEndpoints.some(protectedPath =&gt; {
            if (protectedPath === '/games') {
                // Only protect POST requests to /games
                return endpoint === '/games';
            }
            return endpoint.startsWith(protectedPath);
        });
    }

    // HTTP request helper
    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;

        // Add authentication headers for protected endpoints
        const authHeaders = this.needsAuth(endpoint) ? this.getAuthHeaders() : {};

        const config = {
            headers: {
                'Content-Type': 'application/json',
                ...authHeaders,
                ...options.headers
            },
            ...options
        };

        if (config.body &amp;&amp; typeof config.body === 'object') {
            config.body = JSON.stringify(config.body);
        }

        console.log(`🌐 Making API request to: ${url}`, {
            method: config.method || 'GET',
            body: config.body,
            hasAuth: Object.keys(authHeaders).length &gt; 0
        });

        try {
            const response = await fetch(url, config);

            console.log(`📡 API Response (${response.status}):`, response.statusText);

            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                console.error('Failed to parse JSON response:', jsonError);
                throw new Error(`Invalid JSON response from server`);
            }

            if (!response.ok) {
                console.error(`❌ API Error:`, data);

                // Don't throw error for &quot;already revealed&quot; case, just log it
                if (response.status === 404 &amp;&amp; data.error &amp;&amp; data.error.includes('already revealed')) {
                    console.warn('⚠️ Lie already revealed on server, this is expected');
                    return { success: false, alreadyRevealed: true, message: data.error };
                }

                throw new Error(data.error || `HTTP error! status: ${response.status}`);
            }

            console.log(`✅ API Success:`, data);
            return data;
        } catch (error) {
            // Enhance error information for better retry logic
            if (error.name === 'TypeError' &amp;&amp; error.message.includes('fetch')) {
                console.error(`❌ Network Error (${endpoint}):`, 'Failed to fetch - server may be unavailable');
                throw new Error(`Network error: Failed to fetch from ${endpoint}. Server may be unavailable.`);
            } else if (error.name === 'AbortError') {
                console.error(`❌ Request Timeout (${endpoint}):`, error);
                throw new Error(`Network error: Request timeout for ${endpoint}`);
            } else {
                console.error(`❌ API Request Failed (${endpoint}):`, error);
                throw error;
            }
        }
    }

    // Game API methods
    async createGame(gameData) {
        return this.request('/games', {
            method: 'POST',
            body: gameData
        });
    }

    async getGame(gameId) {
        return this.request(`/games/${gameId}`);
    }

    async revealLie(gameId) {
        return this.request(`/games/${gameId}/reveal-lie`, {
            method: 'PUT',
            body: {
                creator_session: this.userSession
            }
        });
    }

    async getGameStats(gameId) {
        return this.request(`/games/${gameId}/stats`);
    }

    // Vote API methods
    async submitVote(gameId, votedStatement) {
        return this.request('/votes', {
            method: 'POST',
            body: {
                game_id: gameId,
                voted_statement: votedStatement,
                user_session: this.userSession
            }
        });
    }

    async getVotes(gameId) {
        return this.request(`/votes/game/${gameId}`);
    }

    async checkVoteStatus(gameId) {
        return this.request(`/votes/check/${gameId}/${this.userSession}`);
    }

    // WebSocket methods
    connectWebSocket(gameId, isAdmin = false) {
        return new Promise((resolve, reject) =&gt; {
            try {
                // Import socket.io-client dynamically for better compatibility
                if (typeof io === 'undefined') {
                    throw new Error('Socket.IO client not loaded');
                }

                this.socket = io(this.wsURL.replace('ws://', 'http://').replace('wss://', 'https://'));

                this.socket.on('connect', () =&gt; {
                    console.log('✅ WebSocket connected');

                    // Join the game room
                    this.socket.emit('joinGame', {
                        gameId,
                        userSession: this.userSession,
                        isAdmin
                    });

                    resolve(this.socket);
                });

                this.socket.on('connect_error', (error) =&gt; {
                    console.error('❌ WebSocket connection error:', error);
                    reject(error);
                });

                this.socket.on('error', (error) =&gt; {
                    console.error('🔌 WebSocket error:', error);
                });

                this.socket.on('disconnect', (reason) =&gt; {
                    console.log('🔌 WebSocket disconnected:', reason);
                });

            } catch (error) {
                console.error('Failed to initialize WebSocket:', error);
                reject(error);
            }
        });
    }

    disconnectWebSocket() {
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
            console.log('🔌 WebSocket disconnected');
        }
    }

    // WebSocket event listeners
    onVoteUpdate(callback) {
        if (this.socket) {
            this.socket.on('voteUpdate', callback);
        }
    }

    onLieRevealed(callback) {
        if (this.socket) {
            this.socket.on('lieRevealed', callback);
        }
    }

    onGameUpdate(callback) {
        if (this.socket) {
            this.socket.on('gameUpdate', callback);
        }
    }

    onUserJoined(callback) {
        if (this.socket) {
            this.socket.on('userJoined', callback);
        }
    }

    onUserLeft(callback) {
        if (this.socket) {
            this.socket.on('userLeft', callback);
        }
    }

    onParticipantCountUpdate(callback) {
        if (this.socket) {
            this.socket.on('participantCountUpdate', callback);
        }
    }

    onTimerUpdate(callback) {
        if (this.socket) {
            this.socket.on('timerUpdate', callback);
        }
    }

    // Admin actions via WebSocket
    revealLieViaWebSocket(gameId) {
        if (this.socket) {
            this.socket.emit('revealLie', { gameId });
        }
    }

    sendTimerUpdate(gameId, timeRemaining) {
        if (this.socket) {
            this.socket.emit('timerUpdate', { gameId, timeRemaining });
        }
    }

    requestVoteUpdate(gameId) {
        if (this.socket) {
            this.socket.emit('requestVoteUpdate', { gameId });
        }
    }

    // Health check
    async healthCheck() {
        try {
            return await this.request('/health');
        } catch (error) {
            console.error('Health check failed:', error);
            return { status: 'ERROR', error: error.message };
        }
    }
}

// Create singleton instance
export const apiService = new ApiService();</content>
    

  </file>
  <file>
    
  
    <path>src/services/music.js</path>
    
  
    <content>// Centralized music control for Two Truths and a Lie
// Non-breaking extraction from main.js

export const musicService = {
	audioEl: null,
	enabled: true,

	init(audioElement) {
		this.audioEl = audioElement;
	},

	isEnabled() {
		return this.enabled;
	},

	setEnabled(enabled) {
		this.enabled = !!enabled;
		this.updateButtons();
		if (!this.enabled) {
			this.stop();
		}
	},

	// Start music if enabled; optionally override src
	start(src) {
		if (!this.audioEl || !this.enabled) return;
		if (src) {
			this.audioEl.src = src;
		}
		const playPromise = this.audioEl.play();
		if (playPromise &amp;&amp; typeof playPromise.catch === 'function') {
			playPromise.catch(() =&gt; {
				// Fallback: wait for first user interaction
				document.addEventListener(
					'click',
					() =&gt; {
						if (this.enabled &amp;&amp; this.audioEl &amp;&amp; this.audioEl.paused) {
							this.audioEl.play().catch(() =&gt; {});
						}
					},
					{ once: true }
				);
			});
		}
	},

	stop() {
		if (this.audioEl &amp;&amp; !this.audioEl.paused) {
			this.audioEl.pause();
		}
	},

	toggle() {
		this.setEnabled(!this.enabled);
		return this.enabled;
	},

	updateButtons() {
		const buttons = document.querySelectorAll('.music-toggle-btn');
		buttons.forEach((btn) =&gt; {
			btn.textContent = this.enabled ? '🔊 Music On' : '🔇 Music Off';
		});
	},

	// Only plays on voting/results pages
	maybeStartForPage(pageName, customSrc) {
		if (pageName === 'voting' || pageName === 'results') {
			this.start(customSrc);
		} else {
			this.stop();
		}
	},
};</content>
    

  </file>
</repository_files>
<statistics>
  <total_files>30</total_files>
  <total_chars>363956</total_chars>
  <total_tokens>0</total_tokens>
  <generated_at>2025-08-17 22:51:39</generated_at>
</statistics>
</repository>